/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/js/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "../deps/phoenix/priv/static/phoenix.js":
/*!**********************************************!*\
  !*** ../deps/phoenix/priv/static/phoenix.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function (e, t) {\n   true ? module.exports = t() : undefined;\n}(this, function () {\n  return function (e) {\n    var t = {};\n\n    function n(i) {\n      if (t[i]) return t[i].exports;\n      var o = t[i] = {\n        i: i,\n        l: !1,\n        exports: {}\n      };\n      return e[i].call(o.exports, o, o.exports, n), o.l = !0, o.exports;\n    }\n\n    return n.m = e, n.c = t, n.d = function (e, t, i) {\n      n.o(e, t) || Object.defineProperty(e, t, {\n        enumerable: !0,\n        get: i\n      });\n    }, n.r = function (e) {\n      \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n        value: \"Module\"\n      }), Object.defineProperty(e, \"__esModule\", {\n        value: !0\n      });\n    }, n.t = function (e, t) {\n      if (1 & t && (e = n(e)), 8 & t) return e;\n      if (4 & t && \"object\" == typeof e && e && e.__esModule) return e;\n      var i = Object.create(null);\n      if (n.r(i), Object.defineProperty(i, \"default\", {\n        enumerable: !0,\n        value: e\n      }), 2 & t && \"string\" != typeof e) for (var o in e) n.d(i, o, function (t) {\n        return e[t];\n      }.bind(null, o));\n      return i;\n    }, n.n = function (e) {\n      var t = e && e.__esModule ? function () {\n        return e.default;\n      } : function () {\n        return e;\n      };\n      return n.d(t, \"a\", t), t;\n    }, n.o = function (e, t) {\n      return Object.prototype.hasOwnProperty.call(e, t);\n    }, n.p = \"\", n(n.s = 0);\n  }([function (e, t, n) {\n    (function (t) {\n      e.exports = t.Phoenix = n(2);\n    }).call(this, n(1));\n  }, function (e, t) {\n    var n;\n\n    n = function () {\n      return this;\n    }();\n\n    try {\n      n = n || new Function(\"return this\")();\n    } catch (e) {\n      \"object\" == typeof window && (n = window);\n    }\n\n    e.exports = n;\n  }, function (e, t, n) {\n    \"use strict\";\n\n    function i(e) {\n      return function (e) {\n        if (Array.isArray(e)) return a(e);\n      }(e) || function (e) {\n        if (\"undefined\" != typeof Symbol && Symbol.iterator in Object(e)) return Array.from(e);\n      }(e) || s(e) || function () {\n        throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n      }();\n    }\n\n    function o(e) {\n      return (o = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (e) {\n        return typeof e;\n      } : function (e) {\n        return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : typeof e;\n      })(e);\n    }\n\n    function r(e, t) {\n      return function (e) {\n        if (Array.isArray(e)) return e;\n      }(e) || function (e, t) {\n        if (\"undefined\" == typeof Symbol || !(Symbol.iterator in Object(e))) return;\n        var n = [],\n            i = !0,\n            o = !1,\n            r = void 0;\n\n        try {\n          for (var s, a = e[Symbol.iterator](); !(i = (s = a.next()).done) && (n.push(s.value), !t || n.length !== t); i = !0);\n        } catch (e) {\n          o = !0, r = e;\n        } finally {\n          try {\n            i || null == a.return || a.return();\n          } finally {\n            if (o) throw r;\n          }\n        }\n\n        return n;\n      }(e, t) || s(e, t) || function () {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n      }();\n    }\n\n    function s(e, t) {\n      if (e) {\n        if (\"string\" == typeof e) return a(e, t);\n        var n = Object.prototype.toString.call(e).slice(8, -1);\n        return \"Object\" === n && e.constructor && (n = e.constructor.name), \"Map\" === n || \"Set\" === n ? Array.from(n) : \"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? a(e, t) : void 0;\n      }\n    }\n\n    function a(e, t) {\n      (null == t || t > e.length) && (t = e.length);\n\n      for (var n = 0, i = new Array(t); n < t; n++) i[n] = e[n];\n\n      return i;\n    }\n\n    function c(e, t) {\n      if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n    }\n\n    function u(e, t) {\n      for (var n = 0; n < t.length; n++) {\n        var i = t[n];\n        i.enumerable = i.enumerable || !1, i.configurable = !0, \"value\" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);\n      }\n    }\n\n    function h(e, t, n) {\n      return t && u(e.prototype, t), n && u(e, n), e;\n    }\n\n    n.r(t), n.d(t, \"Channel\", function () {\n      return O;\n    }), n.d(t, \"Serializer\", function () {\n      return _;\n    }), n.d(t, \"Socket\", function () {\n      return H;\n    }), n.d(t, \"LongPoll\", function () {\n      return U;\n    }), n.d(t, \"Ajax\", function () {\n      return D;\n    }), n.d(t, \"Presence\", function () {\n      return M;\n    });\n\n    var l = \"undefined\" != typeof self ? self : null,\n        f = \"undefined\" != typeof window ? window : null,\n        d = l || f || void 0,\n        p = 0,\n        v = 1,\n        y = 2,\n        m = 3,\n        g = \"closed\",\n        k = \"errored\",\n        b = \"joined\",\n        j = \"joining\",\n        T = \"leaving\",\n        C = \"phx_close\",\n        R = \"phx_error\",\n        E = \"phx_join\",\n        w = \"phx_reply\",\n        S = \"phx_leave\",\n        A = \"longpoll\",\n        L = \"websocket\",\n        x = function (e) {\n      if (\"function\" == typeof e) return e;\n      return function () {\n        return e;\n      };\n    },\n        P = function () {\n      function e(t, n, i, o) {\n        c(this, e), this.channel = t, this.event = n, this.payload = i || function () {\n          return {};\n        }, this.receivedResp = null, this.timeout = o, this.timeoutTimer = null, this.recHooks = [], this.sent = !1;\n      }\n\n      return h(e, [{\n        key: \"resend\",\n        value: function (e) {\n          this.timeout = e, this.reset(), this.send();\n        }\n      }, {\n        key: \"send\",\n        value: function () {\n          this.hasReceived(\"timeout\") || (this.startTimeout(), this.sent = !0, this.channel.socket.push({\n            topic: this.channel.topic,\n            event: this.event,\n            payload: this.payload(),\n            ref: this.ref,\n            join_ref: this.channel.joinRef()\n          }));\n        }\n      }, {\n        key: \"receive\",\n        value: function (e, t) {\n          return this.hasReceived(e) && t(this.receivedResp.response), this.recHooks.push({\n            status: e,\n            callback: t\n          }), this;\n        }\n      }, {\n        key: \"reset\",\n        value: function () {\n          this.cancelRefEvent(), this.ref = null, this.refEvent = null, this.receivedResp = null, this.sent = !1;\n        }\n      }, {\n        key: \"matchReceive\",\n        value: function (e) {\n          var t = e.status,\n              n = e.response;\n          e.ref;\n          this.recHooks.filter(function (e) {\n            return e.status === t;\n          }).forEach(function (e) {\n            return e.callback(n);\n          });\n        }\n      }, {\n        key: \"cancelRefEvent\",\n        value: function () {\n          this.refEvent && this.channel.off(this.refEvent);\n        }\n      }, {\n        key: \"cancelTimeout\",\n        value: function () {\n          clearTimeout(this.timeoutTimer), this.timeoutTimer = null;\n        }\n      }, {\n        key: \"startTimeout\",\n        value: function () {\n          var e = this;\n          this.timeoutTimer && this.cancelTimeout(), this.ref = this.channel.socket.makeRef(), this.refEvent = this.channel.replyEventName(this.ref), this.channel.on(this.refEvent, function (t) {\n            e.cancelRefEvent(), e.cancelTimeout(), e.receivedResp = t, e.matchReceive(t);\n          }), this.timeoutTimer = setTimeout(function () {\n            e.trigger(\"timeout\", {});\n          }, this.timeout);\n        }\n      }, {\n        key: \"hasReceived\",\n        value: function (e) {\n          return this.receivedResp && this.receivedResp.status === e;\n        }\n      }, {\n        key: \"trigger\",\n        value: function (e, t) {\n          this.channel.trigger(this.refEvent, {\n            status: e,\n            response: t\n          });\n        }\n      }]), e;\n    }(),\n        O = function () {\n      function e(t, n, i) {\n        var o = this;\n        c(this, e), this.state = g, this.topic = t, this.params = x(n || {}), this.socket = i, this.bindings = [], this.bindingRef = 0, this.timeout = this.socket.timeout, this.joinedOnce = !1, this.joinPush = new P(this, E, this.params, this.timeout), this.pushBuffer = [], this.stateChangeRefs = [], this.rejoinTimer = new N(function () {\n          o.socket.isConnected() && o.rejoin();\n        }, this.socket.rejoinAfterMs), this.stateChangeRefs.push(this.socket.onError(function () {\n          return o.rejoinTimer.reset();\n        })), this.stateChangeRefs.push(this.socket.onOpen(function () {\n          o.rejoinTimer.reset(), o.isErrored() && o.rejoin();\n        })), this.joinPush.receive(\"ok\", function () {\n          o.state = b, o.rejoinTimer.reset(), o.pushBuffer.forEach(function (e) {\n            return e.send();\n          }), o.pushBuffer = [];\n        }), this.joinPush.receive(\"error\", function () {\n          o.state = k, o.socket.isConnected() && o.rejoinTimer.scheduleTimeout();\n        }), this.onClose(function () {\n          o.rejoinTimer.reset(), o.socket.hasLogger() && o.socket.log(\"channel\", \"close \".concat(o.topic, \" \").concat(o.joinRef())), o.state = g, o.socket.remove(o);\n        }), this.onError(function (e) {\n          o.socket.hasLogger() && o.socket.log(\"channel\", \"error \".concat(o.topic), e), o.isJoining() && o.joinPush.reset(), o.state = k, o.socket.isConnected() && o.rejoinTimer.scheduleTimeout();\n        }), this.joinPush.receive(\"timeout\", function () {\n          o.socket.hasLogger() && o.socket.log(\"channel\", \"timeout \".concat(o.topic, \" (\").concat(o.joinRef(), \")\"), o.joinPush.timeout), new P(o, S, x({}), o.timeout).send(), o.state = k, o.joinPush.reset(), o.socket.isConnected() && o.rejoinTimer.scheduleTimeout();\n        }), this.on(w, function (e, t) {\n          o.trigger(o.replyEventName(t), e);\n        });\n      }\n\n      return h(e, [{\n        key: \"join\",\n        value: function () {\n          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.timeout;\n          if (this.joinedOnce) throw new Error(\"tried to join multiple times. 'join' can only be called a single time per channel instance\");\n          return this.timeout = e, this.joinedOnce = !0, this.rejoin(), this.joinPush;\n        }\n      }, {\n        key: \"onClose\",\n        value: function (e) {\n          this.on(C, e);\n        }\n      }, {\n        key: \"onError\",\n        value: function (e) {\n          return this.on(R, function (t) {\n            return e(t);\n          });\n        }\n      }, {\n        key: \"on\",\n        value: function (e, t) {\n          var n = this.bindingRef++;\n          return this.bindings.push({\n            event: e,\n            ref: n,\n            callback: t\n          }), n;\n        }\n      }, {\n        key: \"off\",\n        value: function (e, t) {\n          this.bindings = this.bindings.filter(function (n) {\n            return !(n.event === e && (void 0 === t || t === n.ref));\n          });\n        }\n      }, {\n        key: \"canPush\",\n        value: function () {\n          return this.socket.isConnected() && this.isJoined();\n        }\n      }, {\n        key: \"push\",\n        value: function (e, t) {\n          var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.timeout;\n          if (t = t || {}, !this.joinedOnce) throw new Error(\"tried to push '\".concat(e, \"' to '\").concat(this.topic, \"' before joining. Use channel.join() before pushing events\"));\n          var i = new P(this, e, function () {\n            return t;\n          }, n);\n          return this.canPush() ? i.send() : (i.startTimeout(), this.pushBuffer.push(i)), i;\n        }\n      }, {\n        key: \"leave\",\n        value: function () {\n          var e = this,\n              t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.timeout;\n          this.rejoinTimer.reset(), this.joinPush.cancelTimeout(), this.state = T;\n\n          var n = function () {\n            e.socket.hasLogger() && e.socket.log(\"channel\", \"leave \".concat(e.topic)), e.trigger(C, \"leave\");\n          },\n              i = new P(this, S, x({}), t);\n\n          return i.receive(\"ok\", function () {\n            return n();\n          }).receive(\"timeout\", function () {\n            return n();\n          }), i.send(), this.canPush() || i.trigger(\"ok\", {}), i;\n        }\n      }, {\n        key: \"onMessage\",\n        value: function (e, t, n) {\n          return t;\n        }\n      }, {\n        key: \"isMember\",\n        value: function (e, t, n, i) {\n          return this.topic === e && (!i || i === this.joinRef() || (this.socket.hasLogger() && this.socket.log(\"channel\", \"dropping outdated message\", {\n            topic: e,\n            event: t,\n            payload: n,\n            joinRef: i\n          }), !1));\n        }\n      }, {\n        key: \"joinRef\",\n        value: function () {\n          return this.joinPush.ref;\n        }\n      }, {\n        key: \"rejoin\",\n        value: function () {\n          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.timeout;\n          this.isLeaving() || (this.socket.leaveOpenTopic(this.topic), this.state = j, this.joinPush.resend(e));\n        }\n      }, {\n        key: \"trigger\",\n        value: function (e, t, n, i) {\n          var o = this.onMessage(e, t, n, i);\n          if (t && !o) throw new Error(\"channel onMessage callbacks must return the payload, modified or unmodified\");\n\n          for (var r = this.bindings.filter(function (t) {\n            return t.event === e;\n          }), s = 0; s < r.length; s++) {\n            r[s].callback(o, n, i || this.joinRef());\n          }\n        }\n      }, {\n        key: \"replyEventName\",\n        value: function (e) {\n          return \"chan_reply_\".concat(e);\n        }\n      }, {\n        key: \"isClosed\",\n        value: function () {\n          return this.state === g;\n        }\n      }, {\n        key: \"isErrored\",\n        value: function () {\n          return this.state === k;\n        }\n      }, {\n        key: \"isJoined\",\n        value: function () {\n          return this.state === b;\n        }\n      }, {\n        key: \"isJoining\",\n        value: function () {\n          return this.state === j;\n        }\n      }, {\n        key: \"isLeaving\",\n        value: function () {\n          return this.state === T;\n        }\n      }]), e;\n    }(),\n        _ = {\n      HEADER_LENGTH: 1,\n      META_LENGTH: 4,\n      KINDS: {\n        push: 0,\n        reply: 1,\n        broadcast: 2\n      },\n      encode: function (e, t) {\n        if (e.payload.constructor === ArrayBuffer) return t(this.binaryEncode(e));\n        var n = [e.join_ref, e.ref, e.topic, e.event, e.payload];\n        return t(JSON.stringify(n));\n      },\n      decode: function (e, t) {\n        if (e.constructor === ArrayBuffer) return t(this.binaryDecode(e));\n        var n = r(JSON.parse(e), 5);\n        return t({\n          join_ref: n[0],\n          ref: n[1],\n          topic: n[2],\n          event: n[3],\n          payload: n[4]\n        });\n      },\n      binaryEncode: function (e) {\n        var t = e.join_ref,\n            n = e.ref,\n            i = e.event,\n            o = e.topic,\n            r = e.payload,\n            s = this.META_LENGTH + t.length + n.length + o.length + i.length,\n            a = new ArrayBuffer(this.HEADER_LENGTH + s),\n            c = new DataView(a),\n            u = 0;\n        c.setUint8(u++, this.KINDS.push), c.setUint8(u++, t.length), c.setUint8(u++, n.length), c.setUint8(u++, o.length), c.setUint8(u++, i.length), Array.from(t, function (e) {\n          return c.setUint8(u++, e.charCodeAt(0));\n        }), Array.from(n, function (e) {\n          return c.setUint8(u++, e.charCodeAt(0));\n        }), Array.from(o, function (e) {\n          return c.setUint8(u++, e.charCodeAt(0));\n        }), Array.from(i, function (e) {\n          return c.setUint8(u++, e.charCodeAt(0));\n        });\n        var h = new Uint8Array(a.byteLength + r.byteLength);\n        return h.set(new Uint8Array(a), 0), h.set(new Uint8Array(r), a.byteLength), h.buffer;\n      },\n      binaryDecode: function (e) {\n        var t = new DataView(e),\n            n = t.getUint8(0),\n            i = new TextDecoder();\n\n        switch (n) {\n          case this.KINDS.push:\n            return this.decodePush(e, t, i);\n\n          case this.KINDS.reply:\n            return this.decodeReply(e, t, i);\n\n          case this.KINDS.broadcast:\n            return this.decodeBroadcast(e, t, i);\n        }\n      },\n      decodePush: function (e, t, n) {\n        var i = t.getUint8(1),\n            o = t.getUint8(2),\n            r = t.getUint8(3),\n            s = this.HEADER_LENGTH + this.META_LENGTH - 1,\n            a = n.decode(e.slice(s, s + i));\n        s += i;\n        var c = n.decode(e.slice(s, s + o));\n        s += o;\n        var u = n.decode(e.slice(s, s + r));\n        return s += r, {\n          join_ref: a,\n          ref: null,\n          topic: c,\n          event: u,\n          payload: e.slice(s, e.byteLength)\n        };\n      },\n      decodeReply: function (e, t, n) {\n        var i = t.getUint8(1),\n            o = t.getUint8(2),\n            r = t.getUint8(3),\n            s = t.getUint8(4),\n            a = this.HEADER_LENGTH + this.META_LENGTH,\n            c = n.decode(e.slice(a, a + i));\n        a += i;\n        var u = n.decode(e.slice(a, a + o));\n        a += o;\n        var h = n.decode(e.slice(a, a + r));\n        a += r;\n        var l = n.decode(e.slice(a, a + s));\n        a += s;\n        var f = e.slice(a, e.byteLength);\n        return {\n          join_ref: c,\n          ref: u,\n          topic: h,\n          event: w,\n          payload: {\n            status: l,\n            response: f\n          }\n        };\n      },\n      decodeBroadcast: function (e, t, n) {\n        var i = t.getUint8(1),\n            o = t.getUint8(2),\n            r = this.HEADER_LENGTH + 2,\n            s = n.decode(e.slice(r, r + i));\n        r += i;\n        var a = n.decode(e.slice(r, r + o));\n        return r += o, {\n          join_ref: null,\n          ref: null,\n          topic: s,\n          event: a,\n          payload: e.slice(r, e.byteLength)\n        };\n      }\n    },\n        H = function () {\n      function e(t) {\n        var n = this,\n            i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n        c(this, e), this.stateChangeCallbacks = {\n          open: [],\n          close: [],\n          error: [],\n          message: []\n        }, this.channels = [], this.sendBuffer = [], this.ref = 0, this.timeout = i.timeout || 1e4, this.transport = i.transport || d.WebSocket || U, this.defaultEncoder = _.encode.bind(_), this.defaultDecoder = _.decode.bind(_), this.closeWasClean = !1, this.unloaded = !1, this.binaryType = i.binaryType || \"arraybuffer\", this.transport !== U ? (this.encode = i.encode || this.defaultEncoder, this.decode = i.decode || this.defaultDecoder) : (this.encode = this.defaultEncoder, this.decode = this.defaultDecoder), f && f.addEventListener && f.addEventListener(\"beforeunload\", function (e) {\n          n.conn && (n.unloaded = !0, n.abnormalClose(\"unloaded\"));\n        }), this.heartbeatIntervalMs = i.heartbeatIntervalMs || 3e4, this.rejoinAfterMs = function (e) {\n          return i.rejoinAfterMs ? i.rejoinAfterMs(e) : [1e3, 2e3, 5e3][e - 1] || 1e4;\n        }, this.reconnectAfterMs = function (e) {\n          return n.unloaded ? 100 : i.reconnectAfterMs ? i.reconnectAfterMs(e) : [10, 50, 100, 150, 200, 250, 500, 1e3, 2e3][e - 1] || 5e3;\n        }, this.logger = i.logger || null, this.longpollerTimeout = i.longpollerTimeout || 2e4, this.params = x(i.params || {}), this.endPoint = \"\".concat(t, \"/\").concat(L), this.vsn = i.vsn || \"2.0.0\", this.heartbeatTimer = null, this.pendingHeartbeatRef = null, this.reconnectTimer = new N(function () {\n          n.teardown(function () {\n            return n.connect();\n          });\n        }, this.reconnectAfterMs);\n      }\n\n      return h(e, [{\n        key: \"protocol\",\n        value: function () {\n          return location.protocol.match(/^https/) ? \"wss\" : \"ws\";\n        }\n      }, {\n        key: \"endPointURL\",\n        value: function () {\n          var e = D.appendParams(D.appendParams(this.endPoint, this.params()), {\n            vsn: this.vsn\n          });\n          return \"/\" !== e.charAt(0) ? e : \"/\" === e.charAt(1) ? \"\".concat(this.protocol(), \":\").concat(e) : \"\".concat(this.protocol(), \"://\").concat(location.host).concat(e);\n        }\n      }, {\n        key: \"disconnect\",\n        value: function (e, t, n) {\n          this.closeWasClean = !0, this.reconnectTimer.reset(), this.teardown(e, t, n);\n        }\n      }, {\n        key: \"connect\",\n        value: function (e) {\n          var t = this;\n          e && (console && console.log(\"passing params to connect is deprecated. Instead pass :params to the Socket constructor\"), this.params = x(e)), this.conn || (this.closeWasClean = !1, this.conn = new this.transport(this.endPointURL()), this.conn.binaryType = this.binaryType, this.conn.timeout = this.longpollerTimeout, this.conn.onopen = function () {\n            return t.onConnOpen();\n          }, this.conn.onerror = function (e) {\n            return t.onConnError(e);\n          }, this.conn.onmessage = function (e) {\n            return t.onConnMessage(e);\n          }, this.conn.onclose = function (e) {\n            return t.onConnClose(e);\n          });\n        }\n      }, {\n        key: \"log\",\n        value: function (e, t, n) {\n          this.logger(e, t, n);\n        }\n      }, {\n        key: \"hasLogger\",\n        value: function () {\n          return null !== this.logger;\n        }\n      }, {\n        key: \"onOpen\",\n        value: function (e) {\n          var t = this.makeRef();\n          return this.stateChangeCallbacks.open.push([t, e]), t;\n        }\n      }, {\n        key: \"onClose\",\n        value: function (e) {\n          var t = this.makeRef();\n          return this.stateChangeCallbacks.close.push([t, e]), t;\n        }\n      }, {\n        key: \"onError\",\n        value: function (e) {\n          var t = this.makeRef();\n          return this.stateChangeCallbacks.error.push([t, e]), t;\n        }\n      }, {\n        key: \"onMessage\",\n        value: function (e) {\n          var t = this.makeRef();\n          return this.stateChangeCallbacks.message.push([t, e]), t;\n        }\n      }, {\n        key: \"onConnOpen\",\n        value: function () {\n          this.hasLogger() && this.log(\"transport\", \"connected to \".concat(this.endPointURL())), this.unloaded = !1, this.closeWasClean = !1, this.flushSendBuffer(), this.reconnectTimer.reset(), this.resetHeartbeat(), this.stateChangeCallbacks.open.forEach(function (e) {\n            return (0, r(e, 2)[1])();\n          });\n        }\n      }, {\n        key: \"heartbeatTimeout\",\n        value: function () {\n          this.pendingHeartbeatRef && (this.pendingHeartbeatRef = null, this.hasLogger() && this.log(\"transport\", \"heartbeat timeout. Attempting to re-establish connection\"), this.abnormalClose(\"heartbeat timeout\"));\n        }\n      }, {\n        key: \"resetHeartbeat\",\n        value: function () {\n          var e = this;\n          this.conn && this.conn.skipHeartbeat || (this.pendingHeartbeatRef = null, clearTimeout(this.heartbeatTimer), setTimeout(function () {\n            return e.sendHeartbeat();\n          }, this.heartbeatIntervalMs));\n        }\n      }, {\n        key: \"teardown\",\n        value: function (e, t, n) {\n          var i = this;\n          if (!this.conn) return e && e();\n          this.waitForBufferDone(function () {\n            i.conn && (t ? i.conn.close(t, n || \"\") : i.conn.close()), i.waitForSocketClosed(function () {\n              i.conn && (i.conn.onclose = function () {}, i.conn = null), e && e();\n            });\n          });\n        }\n      }, {\n        key: \"waitForBufferDone\",\n        value: function (e) {\n          var t = this,\n              n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;\n          5 !== n && this.conn && this.conn.bufferedAmount ? setTimeout(function () {\n            t.waitForBufferDone(e, n + 1);\n          }, 150 * n) : e();\n        }\n      }, {\n        key: \"waitForSocketClosed\",\n        value: function (e) {\n          var t = this,\n              n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;\n          5 !== n && this.conn && this.conn.readyState !== m ? setTimeout(function () {\n            t.waitForSocketClosed(e, n + 1);\n          }, 150 * n) : e();\n        }\n      }, {\n        key: \"onConnClose\",\n        value: function (e) {\n          this.hasLogger() && this.log(\"transport\", \"close\", e), this.triggerChanError(), clearTimeout(this.heartbeatTimer), this.closeWasClean || this.reconnectTimer.scheduleTimeout(), this.stateChangeCallbacks.close.forEach(function (t) {\n            return (0, r(t, 2)[1])(e);\n          });\n        }\n      }, {\n        key: \"onConnError\",\n        value: function (e) {\n          this.hasLogger() && this.log(\"transport\", e), this.triggerChanError(), this.stateChangeCallbacks.error.forEach(function (t) {\n            return (0, r(t, 2)[1])(e);\n          });\n        }\n      }, {\n        key: \"triggerChanError\",\n        value: function () {\n          this.channels.forEach(function (e) {\n            e.isErrored() || e.isLeaving() || e.isClosed() || e.trigger(R);\n          });\n        }\n      }, {\n        key: \"connectionState\",\n        value: function () {\n          switch (this.conn && this.conn.readyState) {\n            case p:\n              return \"connecting\";\n\n            case v:\n              return \"open\";\n\n            case y:\n              return \"closing\";\n\n            default:\n              return \"closed\";\n          }\n        }\n      }, {\n        key: \"isConnected\",\n        value: function () {\n          return \"open\" === this.connectionState();\n        }\n      }, {\n        key: \"remove\",\n        value: function (e) {\n          this.off(e.stateChangeRefs), this.channels = this.channels.filter(function (t) {\n            return t.joinRef() !== e.joinRef();\n          });\n        }\n      }, {\n        key: \"off\",\n        value: function (e) {\n          for (var t in this.stateChangeCallbacks) this.stateChangeCallbacks[t] = this.stateChangeCallbacks[t].filter(function (t) {\n            var n = r(t, 1)[0];\n            return -1 === e.indexOf(n);\n          });\n        }\n      }, {\n        key: \"channel\",\n        value: function (e) {\n          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n              n = new O(e, t, this);\n          return this.channels.push(n), n;\n        }\n      }, {\n        key: \"push\",\n        value: function (e) {\n          var t = this;\n\n          if (this.hasLogger()) {\n            var n = e.topic,\n                i = e.event,\n                o = e.payload,\n                r = e.ref,\n                s = e.join_ref;\n            this.log(\"push\", \"\".concat(n, \" \").concat(i, \" (\").concat(s, \", \").concat(r, \")\"), o);\n          }\n\n          this.isConnected() ? this.encode(e, function (e) {\n            return t.conn.send(e);\n          }) : this.sendBuffer.push(function () {\n            return t.encode(e, function (e) {\n              return t.conn.send(e);\n            });\n          });\n        }\n      }, {\n        key: \"makeRef\",\n        value: function () {\n          var e = this.ref + 1;\n          return e === this.ref ? this.ref = 0 : this.ref = e, this.ref.toString();\n        }\n      }, {\n        key: \"sendHeartbeat\",\n        value: function () {\n          var e = this;\n          this.pendingHeartbeatRef && !this.isConnected() || (this.pendingHeartbeatRef = this.makeRef(), this.push({\n            topic: \"phoenix\",\n            event: \"heartbeat\",\n            payload: {},\n            ref: this.pendingHeartbeatRef\n          }), this.heartbeatTimer = setTimeout(function () {\n            return e.heartbeatTimeout();\n          }, this.heartbeatIntervalMs));\n        }\n      }, {\n        key: \"abnormalClose\",\n        value: function (e) {\n          this.closeWasClean = !1, this.isConnected() && this.conn.close(1e3, e);\n        }\n      }, {\n        key: \"flushSendBuffer\",\n        value: function () {\n          this.isConnected() && this.sendBuffer.length > 0 && (this.sendBuffer.forEach(function (e) {\n            return e();\n          }), this.sendBuffer = []);\n        }\n      }, {\n        key: \"onConnMessage\",\n        value: function (e) {\n          var t = this;\n          this.decode(e.data, function (e) {\n            var n = e.topic,\n                i = e.event,\n                o = e.payload,\n                s = e.ref,\n                a = e.join_ref;\n            s && s === t.pendingHeartbeatRef && (clearTimeout(t.heartbeatTimer), t.pendingHeartbeatRef = null, setTimeout(function () {\n              return t.sendHeartbeat();\n            }, t.heartbeatIntervalMs)), t.hasLogger() && t.log(\"receive\", \"\".concat(o.status || \"\", \" \").concat(n, \" \").concat(i, \" \").concat(s && \"(\" + s + \")\" || \"\"), o);\n\n            for (var c = 0; c < t.channels.length; c++) {\n              var u = t.channels[c];\n              u.isMember(n, i, o, a) && u.trigger(i, o, s, a);\n            }\n\n            for (var h = 0; h < t.stateChangeCallbacks.message.length; h++) {\n              (0, r(t.stateChangeCallbacks.message[h], 2)[1])(e);\n            }\n          });\n        }\n      }, {\n        key: \"leaveOpenTopic\",\n        value: function (e) {\n          var t = this.channels.find(function (t) {\n            return t.topic === e && (t.isJoined() || t.isJoining());\n          });\n          t && (this.hasLogger() && this.log(\"transport\", 'leaving duplicate topic \"'.concat(e, '\"')), t.leave());\n        }\n      }]), e;\n    }(),\n        U = function () {\n      function e(t) {\n        c(this, e), this.endPoint = null, this.token = null, this.skipHeartbeat = !0, this.onopen = function () {}, this.onerror = function () {}, this.onmessage = function () {}, this.onclose = function () {}, this.pollEndpoint = this.normalizeEndpoint(t), this.readyState = p, this.poll();\n      }\n\n      return h(e, [{\n        key: \"normalizeEndpoint\",\n        value: function (e) {\n          return e.replace(\"ws://\", \"http://\").replace(\"wss://\", \"https://\").replace(new RegExp(\"(.*)/\" + L), \"$1/\" + A);\n        }\n      }, {\n        key: \"endpointURL\",\n        value: function () {\n          return D.appendParams(this.pollEndpoint, {\n            token: this.token\n          });\n        }\n      }, {\n        key: \"closeAndRetry\",\n        value: function () {\n          this.close(), this.readyState = p;\n        }\n      }, {\n        key: \"ontimeout\",\n        value: function () {\n          this.onerror(\"timeout\"), this.closeAndRetry();\n        }\n      }, {\n        key: \"poll\",\n        value: function () {\n          var e = this;\n          this.readyState !== v && this.readyState !== p || D.request(\"GET\", this.endpointURL(), \"application/json\", null, this.timeout, this.ontimeout.bind(this), function (t) {\n            if (t) {\n              var n = t.status,\n                  i = t.token,\n                  o = t.messages;\n              e.token = i;\n            } else n = 0;\n\n            switch (n) {\n              case 200:\n                o.forEach(function (t) {\n                  setTimeout(function () {\n                    e.onmessage({\n                      data: t\n                    });\n                  }, 0);\n                }), e.poll();\n                break;\n\n              case 204:\n                e.poll();\n                break;\n\n              case 410:\n                e.readyState = v, e.onopen(), e.poll();\n                break;\n\n              case 403:\n                e.onerror(), e.close();\n                break;\n\n              case 0:\n              case 500:\n                e.onerror(), e.closeAndRetry();\n                break;\n\n              default:\n                throw new Error(\"unhandled poll status \".concat(n));\n            }\n          });\n        }\n      }, {\n        key: \"send\",\n        value: function (e) {\n          var t = this;\n          D.request(\"POST\", this.endpointURL(), \"application/json\", e, this.timeout, this.onerror.bind(this, \"timeout\"), function (e) {\n            e && 200 === e.status || (t.onerror(e && e.status), t.closeAndRetry());\n          });\n        }\n      }, {\n        key: \"close\",\n        value: function (e, t) {\n          this.readyState = m, this.onclose();\n        }\n      }]), e;\n    }(),\n        D = function () {\n      function e() {\n        c(this, e);\n      }\n\n      return h(e, null, [{\n        key: \"request\",\n        value: function (e, t, n, i, o, r, s) {\n          if (d.XDomainRequest) {\n            var a = new XDomainRequest();\n            this.xdomainRequest(a, e, t, i, o, r, s);\n          } else {\n            var c = new d.XMLHttpRequest();\n            this.xhrRequest(c, e, t, n, i, o, r, s);\n          }\n        }\n      }, {\n        key: \"xdomainRequest\",\n        value: function (e, t, n, i, o, r, s) {\n          var a = this;\n          e.timeout = o, e.open(t, n), e.onload = function () {\n            var t = a.parseJSON(e.responseText);\n            s && s(t);\n          }, r && (e.ontimeout = r), e.onprogress = function () {}, e.send(i);\n        }\n      }, {\n        key: \"xhrRequest\",\n        value: function (e, t, n, i, o, r, s, a) {\n          var c = this;\n          e.open(t, n, !0), e.timeout = r, e.setRequestHeader(\"Content-Type\", i), e.onerror = function () {\n            a && a(null);\n          }, e.onreadystatechange = function () {\n            if (e.readyState === c.states.complete && a) {\n              var t = c.parseJSON(e.responseText);\n              a(t);\n            }\n          }, s && (e.ontimeout = s), e.send(o);\n        }\n      }, {\n        key: \"parseJSON\",\n        value: function (e) {\n          if (!e || \"\" === e) return null;\n\n          try {\n            return JSON.parse(e);\n          } catch (t) {\n            return console && console.log(\"failed to parse JSON response\", e), null;\n          }\n        }\n      }, {\n        key: \"serialize\",\n        value: function (e, t) {\n          var n = [];\n\n          for (var i in e) if (e.hasOwnProperty(i)) {\n            var r = t ? \"\".concat(t, \"[\").concat(i, \"]\") : i,\n                s = e[i];\n            \"object\" === o(s) ? n.push(this.serialize(s, r)) : n.push(encodeURIComponent(r) + \"=\" + encodeURIComponent(s));\n          }\n\n          return n.join(\"&\");\n        }\n      }, {\n        key: \"appendParams\",\n        value: function (e, t) {\n          if (0 === Object.keys(t).length) return e;\n          var n = e.match(/\\?/) ? \"&\" : \"?\";\n          return \"\".concat(e).concat(n).concat(this.serialize(t));\n        }\n      }]), e;\n    }();\n\n    D.states = {\n      complete: 4\n    };\n\n    var M = function () {\n      function e(t) {\n        var n = this,\n            i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n        c(this, e);\n        var o = i.events || {\n          state: \"presence_state\",\n          diff: \"presence_diff\"\n        };\n        this.state = {}, this.pendingDiffs = [], this.channel = t, this.joinRef = null, this.caller = {\n          onJoin: function () {},\n          onLeave: function () {},\n          onSync: function () {}\n        }, this.channel.on(o.state, function (t) {\n          var i = n.caller,\n              o = i.onJoin,\n              r = i.onLeave,\n              s = i.onSync;\n          n.joinRef = n.channel.joinRef(), n.state = e.syncState(n.state, t, o, r), n.pendingDiffs.forEach(function (t) {\n            n.state = e.syncDiff(n.state, t, o, r);\n          }), n.pendingDiffs = [], s();\n        }), this.channel.on(o.diff, function (t) {\n          var i = n.caller,\n              o = i.onJoin,\n              r = i.onLeave,\n              s = i.onSync;\n          n.inPendingSyncState() ? n.pendingDiffs.push(t) : (n.state = e.syncDiff(n.state, t, o, r), s());\n        });\n      }\n\n      return h(e, [{\n        key: \"onJoin\",\n        value: function (e) {\n          this.caller.onJoin = e;\n        }\n      }, {\n        key: \"onLeave\",\n        value: function (e) {\n          this.caller.onLeave = e;\n        }\n      }, {\n        key: \"onSync\",\n        value: function (e) {\n          this.caller.onSync = e;\n        }\n      }, {\n        key: \"list\",\n        value: function (t) {\n          return e.list(this.state, t);\n        }\n      }, {\n        key: \"inPendingSyncState\",\n        value: function () {\n          return !this.joinRef || this.joinRef !== this.channel.joinRef();\n        }\n      }], [{\n        key: \"syncState\",\n        value: function (e, t, n, i) {\n          var o = this,\n              r = this.clone(e),\n              s = {},\n              a = {};\n          return this.map(r, function (e, n) {\n            t[e] || (a[e] = n);\n          }), this.map(t, function (e, t) {\n            var n = r[e];\n\n            if (n) {\n              var i = t.metas.map(function (e) {\n                return e.phx_ref;\n              }),\n                  c = n.metas.map(function (e) {\n                return e.phx_ref;\n              }),\n                  u = t.metas.filter(function (e) {\n                return c.indexOf(e.phx_ref) < 0;\n              }),\n                  h = n.metas.filter(function (e) {\n                return i.indexOf(e.phx_ref) < 0;\n              });\n              u.length > 0 && (s[e] = t, s[e].metas = u), h.length > 0 && (a[e] = o.clone(n), a[e].metas = h);\n            } else s[e] = t;\n          }), this.syncDiff(r, {\n            joins: s,\n            leaves: a\n          }, n, i);\n        }\n      }, {\n        key: \"syncDiff\",\n        value: function (e, t, n, o) {\n          var r = t.joins,\n              s = t.leaves,\n              a = this.clone(e);\n          return n || (n = function () {}), o || (o = function () {}), this.map(r, function (e, t) {\n            var o = a[e];\n\n            if (a[e] = t, o) {\n              var r,\n                  s = a[e].metas.map(function (e) {\n                return e.phx_ref;\n              }),\n                  c = o.metas.filter(function (e) {\n                return s.indexOf(e.phx_ref) < 0;\n              });\n              (r = a[e].metas).unshift.apply(r, i(c));\n            }\n\n            n(e, o, t);\n          }), this.map(s, function (e, t) {\n            var n = a[e];\n\n            if (n) {\n              var i = t.metas.map(function (e) {\n                return e.phx_ref;\n              });\n              n.metas = n.metas.filter(function (e) {\n                return i.indexOf(e.phx_ref) < 0;\n              }), o(e, n, t), 0 === n.metas.length && delete a[e];\n            }\n          }), a;\n        }\n      }, {\n        key: \"list\",\n        value: function (e, t) {\n          return t || (t = function (e, t) {\n            return t;\n          }), this.map(e, function (e, n) {\n            return t(e, n);\n          });\n        }\n      }, {\n        key: \"map\",\n        value: function (e, t) {\n          return Object.getOwnPropertyNames(e).map(function (n) {\n            return t(n, e[n]);\n          });\n        }\n      }, {\n        key: \"clone\",\n        value: function (e) {\n          return JSON.parse(JSON.stringify(e));\n        }\n      }]), e;\n    }(),\n        N = function () {\n      function e(t, n) {\n        c(this, e), this.callback = t, this.timerCalc = n, this.timer = null, this.tries = 0;\n      }\n\n      return h(e, [{\n        key: \"reset\",\n        value: function () {\n          this.tries = 0, clearTimeout(this.timer);\n        }\n      }, {\n        key: \"scheduleTimeout\",\n        value: function () {\n          var e = this;\n          clearTimeout(this.timer), this.timer = setTimeout(function () {\n            e.tries = e.tries + 1, e.callback();\n          }, this.timerCalc(this.tries + 1));\n        }\n      }]), e;\n    }();\n  }]);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../deps/phoenix/priv/static/phoenix.js\n");

/***/ }),

/***/ "../deps/phoenix_html/priv/static/phoenix_html.js":
/*!********************************************************!*\
  !*** ../deps/phoenix_html/priv/static/phoenix_html.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n(function () {\n  var PolyfillEvent = eventConstructor();\n\n  function eventConstructor() {\n    if (typeof window.CustomEvent === \"function\") return window.CustomEvent; // IE<=9 Support\n\n    function CustomEvent(event, params) {\n      params = params || {\n        bubbles: false,\n        cancelable: false,\n        detail: undefined\n      };\n      var evt = document.createEvent('CustomEvent');\n      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n      return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n    return CustomEvent;\n  }\n\n  function buildHiddenInput(name, value) {\n    var input = document.createElement(\"input\");\n    input.type = \"hidden\";\n    input.name = name;\n    input.value = value;\n    return input;\n  }\n\n  function handleClick(element, targetModifierKey) {\n    var to = element.getAttribute(\"data-to\"),\n        method = buildHiddenInput(\"_method\", element.getAttribute(\"data-method\")),\n        csrf = buildHiddenInput(\"_csrf_token\", element.getAttribute(\"data-csrf\")),\n        form = document.createElement(\"form\"),\n        target = element.getAttribute(\"target\");\n    form.method = element.getAttribute(\"data-method\") === \"get\" ? \"get\" : \"post\";\n    form.action = to;\n    form.style.display = \"hidden\";\n    if (target) form.target = target;else if (targetModifierKey) form.target = \"_blank\";\n    form.appendChild(csrf);\n    form.appendChild(method);\n    document.body.appendChild(form);\n    form.submit();\n  }\n\n  window.addEventListener(\"click\", function (e) {\n    var element = e.target;\n\n    while (element && element.getAttribute) {\n      var phoenixLinkEvent = new PolyfillEvent('phoenix.link.click', {\n        \"bubbles\": true,\n        \"cancelable\": true\n      });\n\n      if (!element.dispatchEvent(phoenixLinkEvent)) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        return false;\n      }\n\n      if (element.getAttribute(\"data-method\")) {\n        handleClick(element, e.metaKey || e.shiftKey);\n        e.preventDefault();\n        return false;\n      } else {\n        element = element.parentNode;\n      }\n    }\n  }, false);\n  window.addEventListener('phoenix.link.click', function (e) {\n    var message = e.target.getAttribute(\"data-confirm\");\n\n    if (message && !window.confirm(message)) {\n      e.preventDefault();\n    }\n  }, false);\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZGVwcy9waG9lbml4X2h0bWwvcHJpdi9zdGF0aWMvcGhvZW5peF9odG1sLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL2RlcHMvcGhvZW5peF9odG1sL3ByaXYvc3RhdGljL3Bob2VuaXhfaHRtbC5qcz80N2Q4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBQb2x5ZmlsbEV2ZW50ID0gZXZlbnRDb25zdHJ1Y3RvcigpO1xuXG4gIGZ1bmN0aW9uIGV2ZW50Q29uc3RydWN0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cuQ3VzdG9tRXZlbnQgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHdpbmRvdy5DdXN0b21FdmVudDtcbiAgICAvLyBJRTw9OSBTdXBwb3J0XG4gICAgZnVuY3Rpb24gQ3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcykge1xuICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHtidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogZmFsc2UsIGRldGFpbDogdW5kZWZpbmVkfTtcbiAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbCk7XG4gICAgICByZXR1cm4gZXZ0O1xuICAgIH1cbiAgICBDdXN0b21FdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlO1xuICAgIHJldHVybiBDdXN0b21FdmVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkSGlkZGVuSW5wdXQobmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgaW5wdXQudHlwZSA9IFwiaGlkZGVuXCI7XG4gICAgaW5wdXQubmFtZSA9IG5hbWU7XG4gICAgaW5wdXQudmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVDbGljayhlbGVtZW50LCB0YXJnZXRNb2RpZmllcktleSkge1xuICAgIHZhciB0byA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS10b1wiKSxcbiAgICAgICAgbWV0aG9kID0gYnVpbGRIaWRkZW5JbnB1dChcIl9tZXRob2RcIiwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSksXG4gICAgICAgIGNzcmYgPSBidWlsZEhpZGRlbklucHV0KFwiX2NzcmZfdG9rZW5cIiwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNzcmZcIikpLFxuICAgICAgICBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIiksXG4gICAgICAgIHRhcmdldCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpO1xuXG4gICAgZm9ybS5tZXRob2QgPSAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSA9PT0gXCJnZXRcIikgPyBcImdldFwiIDogXCJwb3N0XCI7XG4gICAgZm9ybS5hY3Rpb24gPSB0bztcbiAgICBmb3JtLnN0eWxlLmRpc3BsYXkgPSBcImhpZGRlblwiO1xuXG4gICAgaWYgKHRhcmdldCkgZm9ybS50YXJnZXQgPSB0YXJnZXQ7XG4gICAgZWxzZSBpZiAodGFyZ2V0TW9kaWZpZXJLZXkpIGZvcm0udGFyZ2V0ID0gXCJfYmxhbmtcIjtcblxuICAgIGZvcm0uYXBwZW5kQ2hpbGQoY3NyZik7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChtZXRob2QpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7XG4gICAgZm9ybS5zdWJtaXQoKTtcbiAgfVxuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlbGVtZW50ID0gZS50YXJnZXQ7XG5cbiAgICB3aGlsZSAoZWxlbWVudCAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSkge1xuICAgICAgdmFyIHBob2VuaXhMaW5rRXZlbnQgPSBuZXcgUG9seWZpbGxFdmVudCgncGhvZW5peC5saW5rLmNsaWNrJywge1xuICAgICAgICBcImJ1YmJsZXNcIjogdHJ1ZSwgXCJjYW5jZWxhYmxlXCI6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIWVsZW1lbnQuZGlzcGF0Y2hFdmVudChwaG9lbml4TGlua0V2ZW50KSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1tZXRob2RcIikpIHtcbiAgICAgICAgaGFuZGxlQ2xpY2soZWxlbWVudCwgZS5tZXRhS2V5IHx8IGUuc2hpZnRLZXkpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9LCBmYWxzZSk7XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Bob2VuaXgubGluay5jbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbmZpcm1cIik7XG4gICAgaWYobWVzc2FnZSAmJiAhd2luZG93LmNvbmZpcm0obWVzc2FnZSkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH0sIGZhbHNlKTtcbn0pKCk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBTUE7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQURBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../deps/phoenix_html/priv/static/phoenix_html.js\n");

/***/ }),

/***/ "../deps/phoenix_live_view/priv/static/phoenix_live_view.esm.js":
/*!**********************************************************************!*\
  !*** ../deps/phoenix_live_view/priv/static/phoenix_live_view.esm.js ***!
  \**********************************************************************/
/*! exports provided: LiveSocket */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LiveSocket\", function() { return LiveSocket; });\n// js/phoenix_live_view/constants.js\nvar CONSECUTIVE_RELOADS = \"consecutive-reloads\";\nvar MAX_RELOADS = 10;\nvar RELOAD_JITTER = [1e3, 3e3];\nvar FAILSAFE_JITTER = 3e4;\nvar PHX_EVENT_CLASSES = [\"phx-click-loading\", \"phx-change-loading\", \"phx-submit-loading\", \"phx-keydown-loading\", \"phx-keyup-loading\", \"phx-blur-loading\", \"phx-focus-loading\"];\nvar PHX_COMPONENT = \"data-phx-component\";\nvar PHX_LIVE_LINK = \"data-phx-link\";\nvar PHX_TRACK_STATIC = \"track-static\";\nvar PHX_LINK_STATE = \"data-phx-link-state\";\nvar PHX_REF = \"data-phx-ref\";\nvar PHX_TRACK_UPLOADS = \"track-uploads\";\nvar PHX_UPLOAD_REF = \"data-phx-upload-ref\";\nvar PHX_PREFLIGHTED_REFS = \"data-phx-preflighted-refs\";\nvar PHX_DONE_REFS = \"data-phx-done-refs\";\nvar PHX_DROP_TARGET = \"drop-target\";\nvar PHX_ACTIVE_ENTRY_REFS = \"data-phx-active-refs\";\nvar PHX_LIVE_FILE_UPDATED = \"phx:live-file:updated\";\nvar PHX_SKIP = \"data-phx-skip\";\nvar PHX_REMOVE = \"data-phx-remove\";\nvar PHX_PAGE_LOADING = \"page-loading\";\nvar PHX_CONNECTED_CLASS = \"phx-connected\";\nvar PHX_DISCONNECTED_CLASS = \"phx-disconnected\";\nvar PHX_NO_FEEDBACK_CLASS = \"phx-no-feedback\";\nvar PHX_ERROR_CLASS = \"phx-error\";\nvar PHX_PARENT_ID = \"data-phx-parent-id\";\nvar PHX_MAIN = \"data-phx-main\";\nvar PHX_ROOT_ID = \"data-phx-root-id\";\nvar PHX_TRIGGER_ACTION = \"trigger-action\";\nvar PHX_FEEDBACK_FOR = \"feedback-for\";\nvar PHX_HAS_FOCUSED = \"phx-has-focused\";\nvar FOCUSABLE_INPUTS = [\"text\", \"textarea\", \"number\", \"email\", \"password\", \"search\", \"tel\", \"url\", \"date\", \"time\"];\nvar CHECKABLE_INPUTS = [\"checkbox\", \"radio\"];\nvar PHX_HAS_SUBMITTED = \"phx-has-submitted\";\nvar PHX_SESSION = \"data-phx-session\";\nvar PHX_VIEW_SELECTOR = `[${PHX_SESSION}]`;\nvar PHX_STATIC = \"data-phx-static\";\nvar PHX_READONLY = \"data-phx-readonly\";\nvar PHX_DISABLED = \"data-phx-disabled\";\nvar PHX_DISABLE_WITH = \"disable-with\";\nvar PHX_DISABLE_WITH_RESTORE = \"data-phx-disable-with-restore\";\nvar PHX_HOOK = \"hook\";\nvar PHX_DEBOUNCE = \"debounce\";\nvar PHX_THROTTLE = \"throttle\";\nvar PHX_UPDATE = \"update\";\nvar PHX_KEY = \"key\";\nvar PHX_PRIVATE = \"phxPrivate\";\nvar PHX_AUTO_RECOVER = \"auto-recover\";\nvar PHX_LV_DEBUG = \"phx:live-socket:debug\";\nvar PHX_LV_PROFILE = \"phx:live-socket:profiling\";\nvar PHX_LV_LATENCY_SIM = \"phx:live-socket:latency-sim\";\nvar PHX_PROGRESS = \"progress\";\nvar LOADER_TIMEOUT = 1;\nvar BEFORE_UNLOAD_LOADER_TIMEOUT = 200;\nvar BINDING_PREFIX = \"phx-\";\nvar PUSH_TIMEOUT = 3e4;\nvar DEBOUNCE_TRIGGER = \"debounce-trigger\";\nvar THROTTLED = \"throttled\";\nvar DEBOUNCE_PREV_KEY = \"debounce-prev-key\";\nvar DEFAULTS = {\n  debounce: 300,\n  throttle: 300\n};\nvar DYNAMICS = \"d\";\nvar STATIC = \"s\";\nvar COMPONENTS = \"c\";\nvar EVENTS = \"e\";\nvar REPLY = \"r\";\nvar TITLE = \"t\"; // js/phoenix_live_view/entry_uploader.js\n\nvar EntryUploader = class {\n  constructor(entry, chunkSize, liveSocket) {\n    this.liveSocket = liveSocket;\n    this.entry = entry;\n    this.offset = 0;\n    this.chunkSize = chunkSize;\n    this.chunkTimer = null;\n    this.uploadChannel = liveSocket.channel(`lvu:${entry.ref}`, {\n      token: entry.metadata()\n    });\n  }\n\n  error(reason) {\n    clearTimeout(this.chunkTimer);\n    this.uploadChannel.leave();\n    this.entry.error(reason);\n  }\n\n  upload() {\n    this.uploadChannel.onError(reason => this.error(reason));\n    this.uploadChannel.join().receive(\"ok\", _data => this.readNextChunk()).receive(\"error\", reason => this.error(reason));\n  }\n\n  isDone() {\n    return this.offset >= this.entry.file.size;\n  }\n\n  readNextChunk() {\n    let reader = new window.FileReader();\n    let blob = this.entry.file.slice(this.offset, this.chunkSize + this.offset);\n\n    reader.onload = e => {\n      if (e.target.error === null) {\n        this.offset += e.target.result.byteLength;\n        this.pushChunk(e.target.result);\n      } else {\n        return logError(\"Read error: \" + e.target.error);\n      }\n    };\n\n    reader.readAsArrayBuffer(blob);\n  }\n\n  pushChunk(chunk) {\n    if (!this.uploadChannel.isJoined()) {\n      return;\n    }\n\n    this.uploadChannel.push(\"chunk\", chunk).receive(\"ok\", () => {\n      this.entry.progress(this.offset / this.entry.file.size * 100);\n\n      if (!this.isDone()) {\n        this.chunkTimer = setTimeout(() => this.readNextChunk(), this.liveSocket.getLatencySim() || 0);\n      }\n    });\n  }\n\n}; // js/phoenix_live_view/utils.js\n\nvar logError = (msg, obj) => console.error && console.error(msg, obj);\n\nvar isCid = cid => typeof cid === \"number\";\n\nfunction detectDuplicateIds() {\n  let ids = new Set();\n  let elems = document.querySelectorAll(\"*[id]\");\n\n  for (let i = 0, len = elems.length; i < len; i++) {\n    if (ids.has(elems[i].id)) {\n      console.error(`Multiple IDs detected: ${elems[i].id}. Ensure unique element ids.`);\n    } else {\n      ids.add(elems[i].id);\n    }\n  }\n}\n\nvar debug = (view, kind, msg, obj) => {\n  if (view.liveSocket.isDebugEnabled()) {\n    console.log(`${view.id} ${kind}: ${msg} - `, obj);\n  }\n};\n\nvar closure = val => typeof val === \"function\" ? val : function () {\n  return val;\n};\n\nvar clone = obj => {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nvar closestPhxBinding = (el, binding, borderEl) => {\n  do {\n    if (el.matches(`[${binding}]`)) {\n      return el;\n    }\n\n    el = el.parentElement || el.parentNode;\n  } while (el !== null && el.nodeType === 1 && !(borderEl && borderEl.isSameNode(el) || el.matches(PHX_VIEW_SELECTOR)));\n\n  return null;\n};\n\nvar isObject = obj => {\n  return obj !== null && typeof obj === \"object\" && !(obj instanceof Array);\n};\n\nvar isEqualObj = (obj1, obj2) => JSON.stringify(obj1) === JSON.stringify(obj2);\n\nvar isEmpty = obj => {\n  for (let x in obj) {\n    return false;\n  }\n\n  return true;\n};\n\nvar maybe = (el, callback) => el && callback(el);\n\nvar channelUploader = function (entries, onError, resp, liveSocket) {\n  entries.forEach(entry => {\n    let entryUploader = new EntryUploader(entry, resp.config.chunk_size, liveSocket);\n    entryUploader.upload();\n  });\n}; // js/phoenix_live_view/browser.js\n\n\nvar Browser = {\n  canPushState() {\n    return typeof history.pushState !== \"undefined\";\n  },\n\n  dropLocal(localStorage, namespace, subkey) {\n    return localStorage.removeItem(this.localKey(namespace, subkey));\n  },\n\n  updateLocal(localStorage, namespace, subkey, initial, func) {\n    let current = this.getLocal(localStorage, namespace, subkey);\n    let key = this.localKey(namespace, subkey);\n    let newVal = current === null ? initial : func(current);\n    localStorage.setItem(key, JSON.stringify(newVal));\n    return newVal;\n  },\n\n  getLocal(localStorage, namespace, subkey) {\n    return JSON.parse(localStorage.getItem(this.localKey(namespace, subkey)));\n  },\n\n  updateCurrentState(callback) {\n    if (!this.canPushState()) {\n      return;\n    }\n\n    history.replaceState(callback(history.state || {}), \"\", window.location.href);\n  },\n\n  pushState(kind, meta, to) {\n    if (this.canPushState()) {\n      if (to !== window.location.href) {\n        if (meta.type == \"redirect\" && meta.scroll) {\n          let currentState = history.state || {};\n          currentState.scroll = meta.scroll;\n          history.replaceState(currentState, \"\", window.location.href);\n        }\n\n        delete meta.scroll;\n        history[kind + \"State\"](meta, \"\", to || null);\n        let hashEl = this.getHashTargetEl(window.location.hash);\n\n        if (hashEl) {\n          hashEl.scrollIntoView();\n        } else if (meta.type === \"redirect\") {\n          window.scroll(0, 0);\n        }\n      }\n    } else {\n      this.redirect(to);\n    }\n  },\n\n  setCookie(name, value) {\n    document.cookie = `${name}=${value}`;\n  },\n\n  getCookie(name) {\n    return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${name}s*=s*([^;]*).*$)|^.*$`), \"$1\");\n  },\n\n  redirect(toURL, flash) {\n    if (flash) {\n      Browser.setCookie(\"__phoenix_flash__\", flash + \"; max-age=60000; path=/\");\n    }\n\n    window.location = toURL;\n  },\n\n  localKey(namespace, subkey) {\n    return `${namespace}-${subkey}`;\n  },\n\n  getHashTargetEl(maybeHash) {\n    let hash = maybeHash.toString().substring(1);\n\n    if (hash === \"\") {\n      return;\n    }\n\n    return document.getElementById(hash) || document.querySelector(`a[name=\"${hash}\"]`);\n  }\n\n};\nvar browser_default = Browser; // js/phoenix_live_view/dom.js\n\nvar DOM = {\n  byId(id) {\n    return document.getElementById(id) || logError(`no id found for ${id}`);\n  },\n\n  removeClass(el, className) {\n    el.classList.remove(className);\n\n    if (el.classList.length === 0) {\n      el.removeAttribute(\"class\");\n    }\n  },\n\n  all(node, query, callback) {\n    if (!node) {\n      return [];\n    }\n\n    let array = Array.from(node.querySelectorAll(query));\n    return callback ? array.forEach(callback) : array;\n  },\n\n  childNodeLength(html) {\n    let template = document.createElement(\"template\");\n    template.innerHTML = html;\n    return template.content.childElementCount;\n  },\n\n  isUploadInput(el) {\n    return el.type === \"file\" && el.getAttribute(PHX_UPLOAD_REF) !== null;\n  },\n\n  findUploadInputs(node) {\n    return this.all(node, `input[type=\"file\"][${PHX_UPLOAD_REF}]`);\n  },\n\n  findComponentNodeList(node, cid) {\n    return this.filterWithinSameLiveView(this.all(node, `[${PHX_COMPONENT}=\"${cid}\"]`), node);\n  },\n\n  isPhxDestroyed(node) {\n    return node.id && DOM.private(node, \"destroyed\") ? true : false;\n  },\n\n  markPhxChildDestroyed(el) {\n    el.setAttribute(PHX_SESSION, \"\");\n    this.putPrivate(el, \"destroyed\", true);\n  },\n\n  findPhxChildrenInFragment(html, parentId) {\n    let template = document.createElement(\"template\");\n    template.innerHTML = html;\n    return this.findPhxChildren(template.content, parentId);\n  },\n\n  isIgnored(el, phxUpdate) {\n    return (el.getAttribute(phxUpdate) || el.getAttribute(\"data-phx-update\")) === \"ignore\";\n  },\n\n  isPhxUpdate(el, phxUpdate, updateTypes) {\n    return el.getAttribute && updateTypes.indexOf(el.getAttribute(phxUpdate)) >= 0;\n  },\n\n  findPhxChildren(el, parentId) {\n    return this.all(el, `${PHX_VIEW_SELECTOR}[${PHX_PARENT_ID}=\"${parentId}\"]`);\n  },\n\n  findParentCIDs(node, cids) {\n    let initial = new Set(cids);\n    return cids.reduce((acc, cid) => {\n      let selector = `[${PHX_COMPONENT}=\"${cid}\"] [${PHX_COMPONENT}]`;\n      this.filterWithinSameLiveView(this.all(node, selector), node).map(el => parseInt(el.getAttribute(PHX_COMPONENT))).forEach(childCID => acc.delete(childCID));\n      return acc;\n    }, initial);\n  },\n\n  filterWithinSameLiveView(nodes, parent) {\n    if (parent.querySelector(PHX_VIEW_SELECTOR)) {\n      return nodes.filter(el => this.withinSameLiveView(el, parent));\n    } else {\n      return nodes;\n    }\n  },\n\n  withinSameLiveView(node, parent) {\n    while (node = node.parentNode) {\n      if (node.isSameNode(parent)) {\n        return true;\n      }\n\n      if (node.getAttribute(PHX_SESSION) !== null) {\n        return false;\n      }\n    }\n  },\n\n  private(el, key) {\n    return el[PHX_PRIVATE] && el[PHX_PRIVATE][key];\n  },\n\n  deletePrivate(el, key) {\n    el[PHX_PRIVATE] && delete el[PHX_PRIVATE][key];\n  },\n\n  putPrivate(el, key, value) {\n    if (!el[PHX_PRIVATE]) {\n      el[PHX_PRIVATE] = {};\n    }\n\n    el[PHX_PRIVATE][key] = value;\n  },\n\n  copyPrivates(target, source) {\n    if (source[PHX_PRIVATE]) {\n      target[PHX_PRIVATE] = clone(source[PHX_PRIVATE]);\n    }\n  },\n\n  putTitle(str) {\n    let titleEl = document.querySelector(\"title\");\n    let {\n      prefix,\n      suffix\n    } = titleEl.dataset;\n    document.title = `${prefix || \"\"}${str}${suffix || \"\"}`;\n  },\n\n  debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, callback) {\n    let debounce = el.getAttribute(phxDebounce);\n    let throttle = el.getAttribute(phxThrottle);\n\n    if (debounce === \"\") {\n      debounce = defaultDebounce;\n    }\n\n    if (throttle === \"\") {\n      throttle = defaultThrottle;\n    }\n\n    let value = debounce || throttle;\n\n    switch (value) {\n      case null:\n        return callback();\n\n      case \"blur\":\n        if (this.once(el, \"debounce-blur\")) {\n          el.addEventListener(\"blur\", () => callback());\n        }\n\n        return;\n\n      default:\n        let timeout = parseInt(value);\n\n        let trigger = () => throttle ? this.deletePrivate(el, THROTTLED) : callback();\n\n        let currentCycle = this.incCycle(el, DEBOUNCE_TRIGGER, trigger);\n\n        if (isNaN(timeout)) {\n          return logError(`invalid throttle/debounce value: ${value}`);\n        }\n\n        if (throttle) {\n          let newKeyDown = false;\n\n          if (event.type === \"keydown\") {\n            let prevKey = this.private(el, DEBOUNCE_PREV_KEY);\n            this.putPrivate(el, DEBOUNCE_PREV_KEY, event.key);\n            newKeyDown = prevKey !== event.key;\n          }\n\n          if (!newKeyDown && this.private(el, THROTTLED)) {\n            return false;\n          } else {\n            callback();\n            this.putPrivate(el, THROTTLED, true);\n            setTimeout(() => this.triggerCycle(el, DEBOUNCE_TRIGGER), timeout);\n          }\n        } else {\n          setTimeout(() => this.triggerCycle(el, DEBOUNCE_TRIGGER, currentCycle), timeout);\n        }\n\n        let form = el.form;\n\n        if (form && this.once(form, \"bind-debounce\")) {\n          form.addEventListener(\"submit\", () => {\n            Array.from(new FormData(form).entries(), ([name]) => {\n              let input = form.querySelector(`[name=\"${name}\"]`);\n              this.incCycle(input, DEBOUNCE_TRIGGER);\n              this.deletePrivate(input, THROTTLED);\n            });\n          });\n        }\n\n        if (this.once(el, \"bind-debounce\")) {\n          el.addEventListener(\"blur\", () => this.triggerCycle(el, DEBOUNCE_TRIGGER));\n        }\n\n    }\n  },\n\n  triggerCycle(el, key, currentCycle) {\n    let [cycle, trigger] = this.private(el, key);\n\n    if (!currentCycle) {\n      currentCycle = cycle;\n    }\n\n    if (currentCycle === cycle) {\n      this.incCycle(el, key);\n      trigger();\n    }\n  },\n\n  once(el, key) {\n    if (this.private(el, key) === true) {\n      return false;\n    }\n\n    this.putPrivate(el, key, true);\n    return true;\n  },\n\n  incCycle(el, key, trigger = function () {}) {\n    let [currentCycle] = this.private(el, key) || [0, trigger];\n    currentCycle++;\n    this.putPrivate(el, key, [currentCycle, trigger]);\n    return currentCycle;\n  },\n\n  discardError(container, el, phxFeedbackFor) {\n    let field = el.getAttribute && el.getAttribute(phxFeedbackFor);\n    let input = field && container.querySelector(`[id=\"${field}\"], [name=\"${field}\"]`);\n\n    if (!input) {\n      return;\n    }\n\n    if (!(this.private(input, PHX_HAS_FOCUSED) || this.private(input.form, PHX_HAS_SUBMITTED))) {\n      el.classList.add(PHX_NO_FEEDBACK_CLASS);\n    }\n  },\n\n  showError(inputEl, phxFeedbackFor) {\n    if (inputEl.id || inputEl.name) {\n      this.all(inputEl.form, `[${phxFeedbackFor}=\"${inputEl.id}\"], [${phxFeedbackFor}=\"${inputEl.name}\"]`, el => {\n        this.removeClass(el, PHX_NO_FEEDBACK_CLASS);\n      });\n    }\n  },\n\n  isPhxChild(node) {\n    return node.getAttribute && node.getAttribute(PHX_PARENT_ID);\n  },\n\n  dispatchEvent(target, eventString, detail = {}) {\n    let event = new CustomEvent(eventString, {\n      bubbles: true,\n      cancelable: true,\n      detail\n    });\n    target.dispatchEvent(event);\n  },\n\n  cloneNode(node, html) {\n    if (typeof html === \"undefined\") {\n      return node.cloneNode(true);\n    } else {\n      let cloned = node.cloneNode(false);\n      cloned.innerHTML = html;\n      return cloned;\n    }\n  },\n\n  mergeAttrs(target, source, opts = {}) {\n    let exclude = opts.exclude || [];\n    let isIgnored = opts.isIgnored;\n    let sourceAttrs = source.attributes;\n\n    for (let i = sourceAttrs.length - 1; i >= 0; i--) {\n      let name = sourceAttrs[i].name;\n\n      if (exclude.indexOf(name) < 0) {\n        target.setAttribute(name, source.getAttribute(name));\n      }\n    }\n\n    let targetAttrs = target.attributes;\n\n    for (let i = targetAttrs.length - 1; i >= 0; i--) {\n      let name = targetAttrs[i].name;\n\n      if (isIgnored) {\n        if (name.startsWith(\"data-\") && !source.hasAttribute(name)) {\n          target.removeAttribute(name);\n        }\n      } else {\n        if (!source.hasAttribute(name)) {\n          target.removeAttribute(name);\n        }\n      }\n    }\n  },\n\n  mergeFocusedInput(target, source) {\n    if (!(target instanceof HTMLSelectElement)) {\n      DOM.mergeAttrs(target, source, {\n        except: [\"value\"]\n      });\n    }\n\n    if (source.readOnly) {\n      target.setAttribute(\"readonly\", true);\n    } else {\n      target.removeAttribute(\"readonly\");\n    }\n  },\n\n  hasSelectionRange(el) {\n    return el.setSelectionRange && (el.type === \"text\" || el.type === \"textarea\");\n  },\n\n  restoreFocus(focused, selectionStart, selectionEnd) {\n    if (!DOM.isTextualInput(focused)) {\n      return;\n    }\n\n    let wasFocused = focused.matches(\":focus\");\n\n    if (focused.readOnly) {\n      focused.blur();\n    }\n\n    if (!wasFocused) {\n      focused.focus();\n    }\n\n    if (this.hasSelectionRange(focused)) {\n      focused.setSelectionRange(selectionStart, selectionEnd);\n    }\n  },\n\n  isFormInput(el) {\n    return /^(?:input|select|textarea)$/i.test(el.tagName) && el.type !== \"button\";\n  },\n\n  syncAttrsToProps(el) {\n    if (el instanceof HTMLInputElement && CHECKABLE_INPUTS.indexOf(el.type.toLocaleLowerCase()) >= 0) {\n      el.checked = el.getAttribute(\"checked\") !== null;\n    }\n  },\n\n  syncPropsToAttrs(el) {\n    if (el instanceof HTMLSelectElement) {\n      let selectedItem = el.options.item(el.selectedIndex);\n\n      if (selectedItem && selectedItem.getAttribute(\"selected\") === null) {\n        selectedItem.setAttribute(\"selected\", \"\");\n      }\n    }\n  },\n\n  isTextualInput(el) {\n    return FOCUSABLE_INPUTS.indexOf(el.type) >= 0;\n  },\n\n  isNowTriggerFormExternal(el, phxTriggerExternal) {\n    return el.getAttribute && el.getAttribute(phxTriggerExternal) !== null;\n  },\n\n  syncPendingRef(fromEl, toEl, disableWith) {\n    let ref = fromEl.getAttribute(PHX_REF);\n\n    if (ref === null) {\n      return true;\n    }\n\n    if (DOM.isFormInput(fromEl) || fromEl.getAttribute(disableWith) !== null) {\n      if (DOM.isUploadInput(fromEl)) {\n        DOM.mergeAttrs(fromEl, toEl, {\n          isIgnored: true\n        });\n      }\n\n      DOM.putPrivate(fromEl, PHX_REF, toEl);\n      return false;\n    } else {\n      PHX_EVENT_CLASSES.forEach(className => {\n        fromEl.classList.contains(className) && toEl.classList.add(className);\n      });\n      toEl.setAttribute(PHX_REF, ref);\n      return true;\n    }\n  },\n\n  cleanChildNodes(container, phxUpdate) {\n    if (DOM.isPhxUpdate(container, phxUpdate, [\"append\", \"prepend\"])) {\n      let toRemove = [];\n      container.childNodes.forEach(childNode => {\n        if (!childNode.id) {\n          let isEmptyTextNode = childNode.nodeType === Node.TEXT_NODE && childNode.nodeValue.trim() === \"\";\n\n          if (!isEmptyTextNode) {\n            logError(`only HTML element tags with an id are allowed inside containers with phx-update.\n\nremoving illegal node: \"${(childNode.outerHTML || childNode.nodeValue).trim()}\"\n\n`);\n          }\n\n          toRemove.push(childNode);\n        }\n      });\n      toRemove.forEach(childNode => childNode.remove());\n    }\n  },\n\n  replaceRootContainer(container, tagName, attrs) {\n    let retainedAttrs = new Set([\"id\", PHX_SESSION, PHX_STATIC, PHX_MAIN]);\n\n    if (container.tagName.toLowerCase() === tagName.toLowerCase()) {\n      Array.from(container.attributes).filter(attr => !retainedAttrs.has(attr.name.toLowerCase())).forEach(attr => container.removeAttribute(attr.name));\n      Object.keys(attrs).filter(name => !retainedAttrs.has(name.toLowerCase())).forEach(attr => container.setAttribute(attr, attrs[attr]));\n      return container;\n    } else {\n      let newContainer = document.createElement(tagName);\n      Object.keys(attrs).forEach(attr => newContainer.setAttribute(attr, attrs[attr]));\n      retainedAttrs.forEach(attr => newContainer.setAttribute(attr, container.getAttribute(attr)));\n      newContainer.innerHTML = container.innerHTML;\n      container.replaceWith(newContainer);\n      return newContainer;\n    }\n  }\n\n};\nvar dom_default = DOM; // js/phoenix_live_view/upload_entry.js\n\nvar UploadEntry = class {\n  static isActive(fileEl, file) {\n    let isNew = file._phxRef === void 0;\n    let activeRefs = fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(\",\");\n    let isActive = activeRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;\n    return file.size > 0 && (isNew || isActive);\n  }\n\n  static isPreflighted(fileEl, file) {\n    let preflightedRefs = fileEl.getAttribute(PHX_PREFLIGHTED_REFS).split(\",\");\n    let isPreflighted = preflightedRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;\n    return isPreflighted && this.isActive(fileEl, file);\n  }\n\n  constructor(fileEl, file, view) {\n    this.ref = LiveUploader.genFileRef(file);\n    this.fileEl = fileEl;\n    this.file = file;\n    this.view = view;\n    this.meta = null;\n    this._isCancelled = false;\n    this._isDone = false;\n    this._progress = 0;\n    this._lastProgressSent = -1;\n\n    this._onDone = function () {};\n\n    this._onElUpdated = this.onElUpdated.bind(this);\n    this.fileEl.addEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);\n  }\n\n  metadata() {\n    return this.meta;\n  }\n\n  progress(progress) {\n    this._progress = Math.floor(progress);\n\n    if (this._progress > this._lastProgressSent) {\n      if (this._progress >= 100) {\n        this._progress = 100;\n        this._lastProgressSent = 100;\n        this._isDone = true;\n        this.view.pushFileProgress(this.fileEl, this.ref, 100, () => {\n          LiveUploader.untrackFile(this.fileEl, this.file);\n\n          this._onDone();\n        });\n      } else {\n        this._lastProgressSent = this._progress;\n        this.view.pushFileProgress(this.fileEl, this.ref, this._progress);\n      }\n    }\n  }\n\n  cancel() {\n    this._isCancelled = true;\n    this._isDone = true;\n\n    this._onDone();\n  }\n\n  isDone() {\n    return this._isDone;\n  }\n\n  error(reason = \"failed\") {\n    this.view.pushFileProgress(this.fileEl, this.ref, {\n      error: reason\n    });\n    LiveUploader.clearFiles(this.fileEl);\n  }\n\n  onDone(callback) {\n    this._onDone = () => {\n      this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);\n      callback();\n    };\n  }\n\n  onElUpdated() {\n    let activeRefs = this.fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(\",\");\n\n    if (activeRefs.indexOf(this.ref) === -1) {\n      this.cancel();\n    }\n  }\n\n  toPreflightPayload() {\n    return {\n      last_modified: this.file.lastModified,\n      name: this.file.name,\n      size: this.file.size,\n      type: this.file.type,\n      ref: this.ref\n    };\n  }\n\n  uploader(uploaders) {\n    if (this.meta.uploader) {\n      let callback = uploaders[this.meta.uploader] || logError(`no uploader configured for ${this.meta.uploader}`);\n      return {\n        name: this.meta.uploader,\n        callback\n      };\n    } else {\n      return {\n        name: \"channel\",\n        callback: channelUploader\n      };\n    }\n  }\n\n  zipPostFlight(resp) {\n    this.meta = resp.entries[this.ref];\n\n    if (!this.meta) {\n      logError(`no preflight upload response returned with ref ${this.ref}`, {\n        input: this.fileEl,\n        response: resp\n      });\n    }\n  }\n\n}; // js/phoenix_live_view/live_uploader.js\n\nvar liveUploaderFileRef = 0;\nvar LiveUploader = class {\n  static genFileRef(file) {\n    let ref = file._phxRef;\n\n    if (ref !== void 0) {\n      return ref;\n    } else {\n      file._phxRef = (liveUploaderFileRef++).toString();\n      return file._phxRef;\n    }\n  }\n\n  static getEntryDataURL(inputEl, ref, callback) {\n    let file = this.activeFiles(inputEl).find(file2 => this.genFileRef(file2) === ref);\n    callback(URL.createObjectURL(file));\n  }\n\n  static hasUploadsInProgress(formEl) {\n    let active = 0;\n    dom_default.findUploadInputs(formEl).forEach(input => {\n      if (input.getAttribute(PHX_PREFLIGHTED_REFS) !== input.getAttribute(PHX_DONE_REFS)) {\n        active++;\n      }\n    });\n    return active > 0;\n  }\n\n  static serializeUploads(inputEl) {\n    let files = this.activeFiles(inputEl);\n    let fileData = {};\n    files.forEach(file => {\n      let entry = {\n        path: inputEl.name\n      };\n      let uploadRef = inputEl.getAttribute(PHX_UPLOAD_REF);\n      fileData[uploadRef] = fileData[uploadRef] || [];\n      entry.ref = this.genFileRef(file);\n      entry.name = file.name || entry.ref;\n      entry.type = file.type;\n      entry.size = file.size;\n      fileData[uploadRef].push(entry);\n    });\n    return fileData;\n  }\n\n  static clearFiles(inputEl) {\n    inputEl.value = null;\n    inputEl.removeAttribute(PHX_UPLOAD_REF);\n    dom_default.putPrivate(inputEl, \"files\", []);\n  }\n\n  static untrackFile(inputEl, file) {\n    dom_default.putPrivate(inputEl, \"files\", dom_default.private(inputEl, \"files\").filter(f => !Object.is(f, file)));\n  }\n\n  static trackFiles(inputEl, files) {\n    if (inputEl.getAttribute(\"multiple\") !== null) {\n      let newFiles = files.filter(file => !this.activeFiles(inputEl).find(f => Object.is(f, file)));\n      dom_default.putPrivate(inputEl, \"files\", this.activeFiles(inputEl).concat(newFiles));\n      inputEl.value = null;\n    } else {\n      dom_default.putPrivate(inputEl, \"files\", files);\n    }\n  }\n\n  static activeFileInputs(formEl) {\n    let fileInputs = dom_default.findUploadInputs(formEl);\n    return Array.from(fileInputs).filter(el => el.files && this.activeFiles(el).length > 0);\n  }\n\n  static activeFiles(input) {\n    return (dom_default.private(input, \"files\") || []).filter(f => UploadEntry.isActive(input, f));\n  }\n\n  static inputsAwaitingPreflight(formEl) {\n    let fileInputs = dom_default.findUploadInputs(formEl);\n    return Array.from(fileInputs).filter(input => this.filesAwaitingPreflight(input).length > 0);\n  }\n\n  static filesAwaitingPreflight(input) {\n    return this.activeFiles(input).filter(f => !UploadEntry.isPreflighted(input, f));\n  }\n\n  constructor(inputEl, view, onComplete) {\n    this.view = view;\n    this.onComplete = onComplete;\n    this._entries = Array.from(LiveUploader.filesAwaitingPreflight(inputEl) || []).map(file => new UploadEntry(inputEl, file, view));\n    this.numEntriesInProgress = this._entries.length;\n  }\n\n  entries() {\n    return this._entries;\n  }\n\n  initAdapterUpload(resp, onError, liveSocket) {\n    this._entries = this._entries.map(entry => {\n      entry.zipPostFlight(resp);\n      entry.onDone(() => {\n        this.numEntriesInProgress--;\n\n        if (this.numEntriesInProgress === 0) {\n          this.onComplete();\n        }\n      });\n      return entry;\n    });\n\n    let groupedEntries = this._entries.reduce((acc, entry) => {\n      let {\n        name,\n        callback\n      } = entry.uploader(liveSocket.uploaders);\n      acc[name] = acc[name] || {\n        callback,\n        entries: []\n      };\n      acc[name].entries.push(entry);\n      return acc;\n    }, {});\n\n    for (let name in groupedEntries) {\n      let {\n        callback,\n        entries\n      } = groupedEntries[name];\n      callback(entries, onError, resp, liveSocket);\n    }\n  }\n\n}; // js/phoenix_live_view/hooks.js\n\nvar Hooks = {\n  LiveFileUpload: {\n    activeRefs() {\n      return this.el.getAttribute(PHX_ACTIVE_ENTRY_REFS);\n    },\n\n    preflightedRefs() {\n      return this.el.getAttribute(PHX_PREFLIGHTED_REFS);\n    },\n\n    mounted() {\n      this.preflightedWas = this.preflightedRefs();\n    },\n\n    updated() {\n      let newPreflights = this.preflightedRefs();\n\n      if (this.preflightedWas !== newPreflights) {\n        this.preflightedWas = newPreflights;\n\n        if (newPreflights === \"\") {\n          this.__view.cancelSubmit(this.el.form);\n        }\n      }\n\n      if (this.activeRefs() === \"\") {\n        this.el.value = null;\n      }\n\n      this.el.dispatchEvent(new CustomEvent(PHX_LIVE_FILE_UPDATED));\n    }\n\n  },\n  LiveImgPreview: {\n    mounted() {\n      this.ref = this.el.getAttribute(\"data-phx-entry-ref\");\n      this.inputEl = document.getElementById(this.el.getAttribute(PHX_UPLOAD_REF));\n      LiveUploader.getEntryDataURL(this.inputEl, this.ref, url => {\n        this.url = url;\n        this.el.src = url;\n      });\n    },\n\n    destroyed() {\n      URL.revokeObjectURL(this.url);\n    }\n\n  }\n};\nvar hooks_default = Hooks; // js/phoenix_live_view/dom_post_morph_restorer.js\n\nvar DOMPostMorphRestorer = class {\n  constructor(containerBefore, containerAfter, updateType) {\n    let idsBefore = new Set();\n    let idsAfter = new Set([...containerAfter.children].map(child => child.id));\n    let elementsToModify = [];\n    Array.from(containerBefore.children).forEach(child => {\n      if (child.id) {\n        idsBefore.add(child.id);\n\n        if (idsAfter.has(child.id)) {\n          let previousElementId = child.previousElementSibling && child.previousElementSibling.id;\n          elementsToModify.push({\n            elementId: child.id,\n            previousElementId\n          });\n        }\n      }\n    });\n    this.containerId = containerAfter.id;\n    this.updateType = updateType;\n    this.elementsToModify = elementsToModify;\n    this.elementIdsToAdd = [...idsAfter].filter(id => !idsBefore.has(id));\n  }\n\n  perform() {\n    let container = dom_default.byId(this.containerId);\n    this.elementsToModify.forEach(elementToModify => {\n      if (elementToModify.previousElementId) {\n        maybe(document.getElementById(elementToModify.previousElementId), previousElem => {\n          maybe(document.getElementById(elementToModify.elementId), elem => {\n            let isInRightPlace = elem.previousElementSibling && elem.previousElementSibling.id == previousElem.id;\n\n            if (!isInRightPlace) {\n              previousElem.insertAdjacentElement(\"afterend\", elem);\n            }\n          });\n        });\n      } else {\n        maybe(document.getElementById(elementToModify.elementId), elem => {\n          let isInRightPlace = elem.previousElementSibling == null;\n\n          if (!isInRightPlace) {\n            container.insertAdjacentElement(\"afterbegin\", elem);\n          }\n        });\n      }\n    });\n\n    if (this.updateType == \"prepend\") {\n      this.elementIdsToAdd.reverse().forEach(elemId => {\n        maybe(document.getElementById(elemId), elem => container.insertAdjacentElement(\"afterbegin\", elem));\n      });\n    }\n  }\n\n}; // node_modules/morphdom/dist/morphdom-esm.js\n\nvar DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction morphAttrs(fromNode, toNode) {\n  var toNodeAttrs = toNode.attributes;\n  var attr;\n  var attrName;\n  var attrNamespaceURI;\n  var attrValue;\n  var fromValue;\n\n  if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {\n    return;\n  }\n\n  for (var i = toNodeAttrs.length - 1; i >= 0; i--) {\n    attr = toNodeAttrs[i];\n    attrName = attr.name;\n    attrNamespaceURI = attr.namespaceURI;\n    attrValue = attr.value;\n\n    if (attrNamespaceURI) {\n      attrName = attr.localName || attrName;\n      fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n      if (fromValue !== attrValue) {\n        if (attr.prefix === \"xmlns\") {\n          attrName = attr.name;\n        }\n\n        fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n      }\n    } else {\n      fromValue = fromNode.getAttribute(attrName);\n\n      if (fromValue !== attrValue) {\n        fromNode.setAttribute(attrName, attrValue);\n      }\n    }\n  }\n\n  var fromNodeAttrs = fromNode.attributes;\n\n  for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {\n    attr = fromNodeAttrs[d];\n    attrName = attr.name;\n    attrNamespaceURI = attr.namespaceURI;\n\n    if (attrNamespaceURI) {\n      attrName = attr.localName || attrName;\n\n      if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {\n        fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n      }\n    } else {\n      if (!toNode.hasAttribute(attrName)) {\n        fromNode.removeAttribute(attrName);\n      }\n    }\n  }\n}\n\nvar range;\nvar NS_XHTML = \"http://www.w3.org/1999/xhtml\";\nvar doc = typeof document === \"undefined\" ? void 0 : document;\nvar HAS_TEMPLATE_SUPPORT = !!doc && \"content\" in doc.createElement(\"template\");\nvar HAS_RANGE_SUPPORT = !!doc && doc.createRange && \"createContextualFragment\" in doc.createRange();\n\nfunction createFragmentFromTemplate(str) {\n  var template = doc.createElement(\"template\");\n  template.innerHTML = str;\n  return template.content.childNodes[0];\n}\n\nfunction createFragmentFromRange(str) {\n  if (!range) {\n    range = doc.createRange();\n    range.selectNode(doc.body);\n  }\n\n  var fragment = range.createContextualFragment(str);\n  return fragment.childNodes[0];\n}\n\nfunction createFragmentFromWrap(str) {\n  var fragment = doc.createElement(\"body\");\n  fragment.innerHTML = str;\n  return fragment.childNodes[0];\n}\n\nfunction toElement(str) {\n  str = str.trim();\n\n  if (HAS_TEMPLATE_SUPPORT) {\n    return createFragmentFromTemplate(str);\n  } else if (HAS_RANGE_SUPPORT) {\n    return createFragmentFromRange(str);\n  }\n\n  return createFragmentFromWrap(str);\n}\n\nfunction compareNodeNames(fromEl, toEl) {\n  var fromNodeName = fromEl.nodeName;\n  var toNodeName = toEl.nodeName;\n  var fromCodeStart, toCodeStart;\n\n  if (fromNodeName === toNodeName) {\n    return true;\n  }\n\n  fromCodeStart = fromNodeName.charCodeAt(0);\n  toCodeStart = toNodeName.charCodeAt(0);\n\n  if (fromCodeStart <= 90 && toCodeStart >= 97) {\n    return fromNodeName === toNodeName.toUpperCase();\n  } else if (toCodeStart <= 90 && fromCodeStart >= 97) {\n    return toNodeName === fromNodeName.toUpperCase();\n  } else {\n    return false;\n  }\n}\n\nfunction createElementNS(name, namespaceURI) {\n  return !namespaceURI || namespaceURI === NS_XHTML ? doc.createElement(name) : doc.createElementNS(namespaceURI, name);\n}\n\nfunction moveChildren(fromEl, toEl) {\n  var curChild = fromEl.firstChild;\n\n  while (curChild) {\n    var nextChild = curChild.nextSibling;\n    toEl.appendChild(curChild);\n    curChild = nextChild;\n  }\n\n  return toEl;\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n  if (fromEl[name] !== toEl[name]) {\n    fromEl[name] = toEl[name];\n\n    if (fromEl[name]) {\n      fromEl.setAttribute(name, \"\");\n    } else {\n      fromEl.removeAttribute(name);\n    }\n  }\n}\n\nvar specialElHandlers = {\n  OPTION: function (fromEl, toEl) {\n    var parentNode = fromEl.parentNode;\n\n    if (parentNode) {\n      var parentName = parentNode.nodeName.toUpperCase();\n\n      if (parentName === \"OPTGROUP\") {\n        parentNode = parentNode.parentNode;\n        parentName = parentNode && parentNode.nodeName.toUpperCase();\n      }\n\n      if (parentName === \"SELECT\" && !parentNode.hasAttribute(\"multiple\")) {\n        if (fromEl.hasAttribute(\"selected\") && !toEl.selected) {\n          fromEl.setAttribute(\"selected\", \"selected\");\n          fromEl.removeAttribute(\"selected\");\n        }\n\n        parentNode.selectedIndex = -1;\n      }\n    }\n\n    syncBooleanAttrProp(fromEl, toEl, \"selected\");\n  },\n  INPUT: function (fromEl, toEl) {\n    syncBooleanAttrProp(fromEl, toEl, \"checked\");\n    syncBooleanAttrProp(fromEl, toEl, \"disabled\");\n\n    if (fromEl.value !== toEl.value) {\n      fromEl.value = toEl.value;\n    }\n\n    if (!toEl.hasAttribute(\"value\")) {\n      fromEl.removeAttribute(\"value\");\n    }\n  },\n  TEXTAREA: function (fromEl, toEl) {\n    var newValue = toEl.value;\n\n    if (fromEl.value !== newValue) {\n      fromEl.value = newValue;\n    }\n\n    var firstChild = fromEl.firstChild;\n\n    if (firstChild) {\n      var oldValue = firstChild.nodeValue;\n\n      if (oldValue == newValue || !newValue && oldValue == fromEl.placeholder) {\n        return;\n      }\n\n      firstChild.nodeValue = newValue;\n    }\n  },\n  SELECT: function (fromEl, toEl) {\n    if (!toEl.hasAttribute(\"multiple\")) {\n      var selectedIndex = -1;\n      var i = 0;\n      var curChild = fromEl.firstChild;\n      var optgroup;\n      var nodeName;\n\n      while (curChild) {\n        nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();\n\n        if (nodeName === \"OPTGROUP\") {\n          optgroup = curChild;\n          curChild = optgroup.firstChild;\n        } else {\n          if (nodeName === \"OPTION\") {\n            if (curChild.hasAttribute(\"selected\")) {\n              selectedIndex = i;\n              break;\n            }\n\n            i++;\n          }\n\n          curChild = curChild.nextSibling;\n\n          if (!curChild && optgroup) {\n            curChild = optgroup.nextSibling;\n            optgroup = null;\n          }\n        }\n      }\n\n      fromEl.selectedIndex = selectedIndex;\n    }\n  }\n};\nvar ELEMENT_NODE = 1;\nvar DOCUMENT_FRAGMENT_NODE$1 = 11;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n  if (node) {\n    return node.getAttribute && node.getAttribute(\"id\") || node.id;\n  }\n}\n\nfunction morphdomFactory(morphAttrs2) {\n  return function morphdom2(fromNode, toNode, options) {\n    if (!options) {\n      options = {};\n    }\n\n    if (typeof toNode === \"string\") {\n      if (fromNode.nodeName === \"#document\" || fromNode.nodeName === \"HTML\" || fromNode.nodeName === \"BODY\") {\n        var toNodeHtml = toNode;\n        toNode = doc.createElement(\"html\");\n        toNode.innerHTML = toNodeHtml;\n      } else {\n        toNode = toElement(toNode);\n      }\n    }\n\n    var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n    var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n    var onNodeAdded = options.onNodeAdded || noop;\n    var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n    var onElUpdated = options.onElUpdated || noop;\n    var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n    var onNodeDiscarded = options.onNodeDiscarded || noop;\n    var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n    var childrenOnly = options.childrenOnly === true;\n    var fromNodesLookup = Object.create(null);\n    var keyedRemovalList = [];\n\n    function addKeyedRemoval(key) {\n      keyedRemovalList.push(key);\n    }\n\n    function walkDiscardedChildNodes(node, skipKeyedNodes) {\n      if (node.nodeType === ELEMENT_NODE) {\n        var curChild = node.firstChild;\n\n        while (curChild) {\n          var key = void 0;\n\n          if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n            addKeyedRemoval(key);\n          } else {\n            onNodeDiscarded(curChild);\n\n            if (curChild.firstChild) {\n              walkDiscardedChildNodes(curChild, skipKeyedNodes);\n            }\n          }\n\n          curChild = curChild.nextSibling;\n        }\n      }\n    }\n\n    function removeNode(node, parentNode, skipKeyedNodes) {\n      if (onBeforeNodeDiscarded(node) === false) {\n        return;\n      }\n\n      if (parentNode) {\n        parentNode.removeChild(node);\n      }\n\n      onNodeDiscarded(node);\n      walkDiscardedChildNodes(node, skipKeyedNodes);\n    }\n\n    function indexTree(node) {\n      if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n        var curChild = node.firstChild;\n\n        while (curChild) {\n          var key = getNodeKey(curChild);\n\n          if (key) {\n            fromNodesLookup[key] = curChild;\n          }\n\n          indexTree(curChild);\n          curChild = curChild.nextSibling;\n        }\n      }\n    }\n\n    indexTree(fromNode);\n\n    function handleNodeAdded(el) {\n      onNodeAdded(el);\n      var curChild = el.firstChild;\n\n      while (curChild) {\n        var nextSibling = curChild.nextSibling;\n        var key = getNodeKey(curChild);\n\n        if (key) {\n          var unmatchedFromEl = fromNodesLookup[key];\n\n          if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n            curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n            morphEl(unmatchedFromEl, curChild);\n          } else {\n            handleNodeAdded(curChild);\n          }\n        } else {\n          handleNodeAdded(curChild);\n        }\n\n        curChild = nextSibling;\n      }\n    }\n\n    function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {\n      while (curFromNodeChild) {\n        var fromNextSibling = curFromNodeChild.nextSibling;\n\n        if (curFromNodeKey = getNodeKey(curFromNodeChild)) {\n          addKeyedRemoval(curFromNodeKey);\n        } else {\n          removeNode(curFromNodeChild, fromEl, true);\n        }\n\n        curFromNodeChild = fromNextSibling;\n      }\n    }\n\n    function morphEl(fromEl, toEl, childrenOnly2) {\n      var toElKey = getNodeKey(toEl);\n\n      if (toElKey) {\n        delete fromNodesLookup[toElKey];\n      }\n\n      if (!childrenOnly2) {\n        if (onBeforeElUpdated(fromEl, toEl) === false) {\n          return;\n        }\n\n        morphAttrs2(fromEl, toEl);\n        onElUpdated(fromEl);\n\n        if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n          return;\n        }\n      }\n\n      if (fromEl.nodeName !== \"TEXTAREA\") {\n        morphChildren(fromEl, toEl);\n      } else {\n        specialElHandlers.TEXTAREA(fromEl, toEl);\n      }\n    }\n\n    function morphChildren(fromEl, toEl) {\n      var curToNodeChild = toEl.firstChild;\n      var curFromNodeChild = fromEl.firstChild;\n      var curToNodeKey;\n      var curFromNodeKey;\n      var fromNextSibling;\n      var toNextSibling;\n      var matchingFromEl;\n\n      outer: while (curToNodeChild) {\n        toNextSibling = curToNodeChild.nextSibling;\n        curToNodeKey = getNodeKey(curToNodeChild);\n\n        while (curFromNodeChild) {\n          fromNextSibling = curFromNodeChild.nextSibling;\n\n          if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n            curToNodeChild = toNextSibling;\n            curFromNodeChild = fromNextSibling;\n            continue outer;\n          }\n\n          curFromNodeKey = getNodeKey(curFromNodeChild);\n          var curFromNodeType = curFromNodeChild.nodeType;\n          var isCompatible = void 0;\n\n          if (curFromNodeType === curToNodeChild.nodeType) {\n            if (curFromNodeType === ELEMENT_NODE) {\n              if (curToNodeKey) {\n                if (curToNodeKey !== curFromNodeKey) {\n                  if (matchingFromEl = fromNodesLookup[curToNodeKey]) {\n                    if (fromNextSibling === matchingFromEl) {\n                      isCompatible = false;\n                    } else {\n                      fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                      if (curFromNodeKey) {\n                        addKeyedRemoval(curFromNodeKey);\n                      } else {\n                        removeNode(curFromNodeChild, fromEl, true);\n                      }\n\n                      curFromNodeChild = matchingFromEl;\n                    }\n                  } else {\n                    isCompatible = false;\n                  }\n                }\n              } else if (curFromNodeKey) {\n                isCompatible = false;\n              }\n\n              isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n\n              if (isCompatible) {\n                morphEl(curFromNodeChild, curToNodeChild);\n              }\n            } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n              isCompatible = true;\n\n              if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n              }\n            }\n          }\n\n          if (isCompatible) {\n            curToNodeChild = toNextSibling;\n            curFromNodeChild = fromNextSibling;\n            continue outer;\n          }\n\n          if (curFromNodeKey) {\n            addKeyedRemoval(curFromNodeKey);\n          } else {\n            removeNode(curFromNodeChild, fromEl, true);\n          }\n\n          curFromNodeChild = fromNextSibling;\n        }\n\n        if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n          fromEl.appendChild(matchingFromEl);\n          morphEl(matchingFromEl, curToNodeChild);\n        } else {\n          var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n\n          if (onBeforeNodeAddedResult !== false) {\n            if (onBeforeNodeAddedResult) {\n              curToNodeChild = onBeforeNodeAddedResult;\n            }\n\n            if (curToNodeChild.actualize) {\n              curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n            }\n\n            fromEl.appendChild(curToNodeChild);\n            handleNodeAdded(curToNodeChild);\n          }\n        }\n\n        curToNodeChild = toNextSibling;\n        curFromNodeChild = fromNextSibling;\n      }\n\n      cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);\n      var specialElHandler = specialElHandlers[fromEl.nodeName];\n\n      if (specialElHandler) {\n        specialElHandler(fromEl, toEl);\n      }\n    }\n\n    var morphedNode = fromNode;\n    var morphedNodeType = morphedNode.nodeType;\n    var toNodeType = toNode.nodeType;\n\n    if (!childrenOnly) {\n      if (morphedNodeType === ELEMENT_NODE) {\n        if (toNodeType === ELEMENT_NODE) {\n          if (!compareNodeNames(fromNode, toNode)) {\n            onNodeDiscarded(fromNode);\n            morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n          }\n        } else {\n          morphedNode = toNode;\n        }\n      } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) {\n        if (toNodeType === morphedNodeType) {\n          if (morphedNode.nodeValue !== toNode.nodeValue) {\n            morphedNode.nodeValue = toNode.nodeValue;\n          }\n\n          return morphedNode;\n        } else {\n          morphedNode = toNode;\n        }\n      }\n    }\n\n    if (morphedNode === toNode) {\n      onNodeDiscarded(fromNode);\n    } else {\n      if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {\n        return;\n      }\n\n      morphEl(morphedNode, toNode, childrenOnly);\n\n      if (keyedRemovalList) {\n        for (var i = 0, len = keyedRemovalList.length; i < len; i++) {\n          var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n\n          if (elToRemove) {\n            removeNode(elToRemove, elToRemove.parentNode, false);\n          }\n        }\n      }\n    }\n\n    if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n      if (morphedNode.actualize) {\n        morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n      }\n\n      fromNode.parentNode.replaceChild(morphedNode, fromNode);\n    }\n\n    return morphedNode;\n  };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\nvar morphdom_esm_default = morphdom; // js/phoenix_live_view/dom_patch.js\n\nvar DOMPatch = class {\n  static patchEl(fromEl, toEl, activeElement) {\n    morphdom_esm_default(fromEl, toEl, {\n      childrenOnly: false,\n      onBeforeElUpdated: (fromEl2, toEl2) => {\n        if (activeElement && activeElement.isSameNode(fromEl2) && dom_default.isFormInput(fromEl2)) {\n          dom_default.mergeFocusedInput(fromEl2, toEl2);\n          return false;\n        }\n      }\n    });\n  }\n\n  constructor(view, container, id, html, targetCID) {\n    this.view = view;\n    this.liveSocket = view.liveSocket;\n    this.container = container;\n    this.id = id;\n    this.rootID = view.root.id;\n    this.html = html;\n    this.targetCID = targetCID;\n    this.cidPatch = isCid(this.targetCID);\n    this.callbacks = {\n      beforeadded: [],\n      beforeupdated: [],\n      beforephxChildAdded: [],\n      afteradded: [],\n      afterupdated: [],\n      afterdiscarded: [],\n      afterphxChildAdded: []\n    };\n  }\n\n  before(kind, callback) {\n    this.callbacks[`before${kind}`].push(callback);\n  }\n\n  after(kind, callback) {\n    this.callbacks[`after${kind}`].push(callback);\n  }\n\n  trackBefore(kind, ...args) {\n    this.callbacks[`before${kind}`].forEach(callback => callback(...args));\n  }\n\n  trackAfter(kind, ...args) {\n    this.callbacks[`after${kind}`].forEach(callback => callback(...args));\n  }\n\n  markPrunableContentForRemoval() {\n    dom_default.all(this.container, \"[phx-update=append] > *, [phx-update=prepend] > *\", el => {\n      el.setAttribute(PHX_REMOVE, \"\");\n    });\n  }\n\n  perform() {\n    let {\n      view,\n      liveSocket,\n      container,\n      html\n    } = this;\n    let targetContainer = this.isCIDPatch() ? this.targetCIDContainer(html) : container;\n\n    if (this.isCIDPatch() && !targetContainer) {\n      return;\n    }\n\n    let focused = liveSocket.getActiveElement();\n    let {\n      selectionStart,\n      selectionEnd\n    } = focused && dom_default.hasSelectionRange(focused) ? focused : {};\n    let phxUpdate = liveSocket.binding(PHX_UPDATE);\n    let phxFeedbackFor = liveSocket.binding(PHX_FEEDBACK_FOR);\n    let disableWith = liveSocket.binding(PHX_DISABLE_WITH);\n    let phxTriggerExternal = liveSocket.binding(PHX_TRIGGER_ACTION);\n    let added = [];\n    let updates = [];\n    let appendPrependUpdates = [];\n    let externalFormTriggered = null;\n    let diffHTML = liveSocket.time(\"premorph container prep\", () => {\n      return this.buildDiffHTML(container, html, phxUpdate, targetContainer);\n    });\n    this.trackBefore(\"added\", container);\n    this.trackBefore(\"updated\", container, container);\n    liveSocket.time(\"morphdom\", () => {\n      morphdom_esm_default(targetContainer, diffHTML, {\n        childrenOnly: targetContainer.getAttribute(PHX_COMPONENT) === null,\n        getNodeKey: node => {\n          return dom_default.isPhxDestroyed(node) ? null : node.id;\n        },\n        onBeforeNodeAdded: el => {\n          this.trackBefore(\"added\", el);\n          return el;\n        },\n        onNodeAdded: el => {\n          if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {\n            externalFormTriggered = el;\n          }\n\n          dom_default.discardError(targetContainer, el, phxFeedbackFor);\n\n          if (dom_default.isPhxChild(el) && view.ownsElement(el)) {\n            this.trackAfter(\"phxChildAdded\", el);\n          }\n\n          added.push(el);\n        },\n        onNodeDiscarded: el => {\n          if (dom_default.isPhxChild(el)) {\n            liveSocket.destroyViewByEl(el);\n          }\n\n          this.trackAfter(\"discarded\", el);\n        },\n        onBeforeNodeDiscarded: el => {\n          if (el.getAttribute && el.getAttribute(PHX_REMOVE) !== null) {\n            return true;\n          }\n\n          if (el.parentNode !== null && dom_default.isPhxUpdate(el.parentNode, phxUpdate, [\"append\", \"prepend\"]) && el.id) {\n            return false;\n          }\n\n          if (this.skipCIDSibling(el)) {\n            return false;\n          }\n\n          return true;\n        },\n        onElUpdated: el => {\n          if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {\n            externalFormTriggered = el;\n          }\n\n          updates.push(el);\n        },\n        onBeforeElUpdated: (fromEl, toEl) => {\n          dom_default.cleanChildNodes(toEl, phxUpdate);\n\n          if (this.skipCIDSibling(toEl)) {\n            return false;\n          }\n\n          if (dom_default.isIgnored(fromEl, phxUpdate)) {\n            this.trackBefore(\"updated\", fromEl, toEl);\n            dom_default.mergeAttrs(fromEl, toEl, {\n              isIgnored: true\n            });\n            updates.push(fromEl);\n            return false;\n          }\n\n          if (fromEl.type === \"number\" && fromEl.validity && fromEl.validity.badInput) {\n            return false;\n          }\n\n          if (!dom_default.syncPendingRef(fromEl, toEl, disableWith)) {\n            if (dom_default.isUploadInput(fromEl)) {\n              this.trackBefore(\"updated\", fromEl, toEl);\n              updates.push(fromEl);\n            }\n\n            return false;\n          }\n\n          if (dom_default.isPhxChild(toEl)) {\n            let prevSession = fromEl.getAttribute(PHX_SESSION);\n            dom_default.mergeAttrs(fromEl, toEl, {\n              exclude: [PHX_STATIC]\n            });\n\n            if (prevSession !== \"\") {\n              fromEl.setAttribute(PHX_SESSION, prevSession);\n            }\n\n            fromEl.setAttribute(PHX_ROOT_ID, this.rootID);\n            return false;\n          }\n\n          dom_default.copyPrivates(toEl, fromEl);\n          dom_default.discardError(targetContainer, toEl, phxFeedbackFor);\n          dom_default.syncPropsToAttrs(toEl);\n          let isFocusedFormEl = focused && fromEl.isSameNode(focused) && dom_default.isFormInput(fromEl);\n\n          if (isFocusedFormEl && !this.forceFocusedSelectUpdate(fromEl, toEl)) {\n            this.trackBefore(\"updated\", fromEl, toEl);\n            dom_default.mergeFocusedInput(fromEl, toEl);\n            dom_default.syncAttrsToProps(fromEl);\n            updates.push(fromEl);\n            return false;\n          } else {\n            if (dom_default.isPhxUpdate(toEl, phxUpdate, [\"append\", \"prepend\"])) {\n              appendPrependUpdates.push(new DOMPostMorphRestorer(fromEl, toEl, toEl.getAttribute(phxUpdate)));\n            }\n\n            dom_default.syncAttrsToProps(toEl);\n            this.trackBefore(\"updated\", fromEl, toEl);\n            return true;\n          }\n        }\n      });\n    });\n\n    if (liveSocket.isDebugEnabled()) {\n      detectDuplicateIds();\n    }\n\n    if (appendPrependUpdates.length > 0) {\n      liveSocket.time(\"post-morph append/prepend restoration\", () => {\n        appendPrependUpdates.forEach(update => update.perform());\n      });\n    }\n\n    liveSocket.silenceEvents(() => dom_default.restoreFocus(focused, selectionStart, selectionEnd));\n    dom_default.dispatchEvent(document, \"phx:update\");\n    added.forEach(el => this.trackAfter(\"added\", el));\n    updates.forEach(el => this.trackAfter(\"updated\", el));\n\n    if (externalFormTriggered) {\n      liveSocket.disconnect();\n      externalFormTriggered.submit();\n    }\n\n    return true;\n  }\n\n  forceFocusedSelectUpdate(fromEl, toEl) {\n    let isSelect = [\"select\", \"select-one\", \"select-multiple\"].find(t => t === fromEl.type);\n    return fromEl.multiple === true || isSelect && fromEl.innerHTML != toEl.innerHTML;\n  }\n\n  isCIDPatch() {\n    return this.cidPatch;\n  }\n\n  skipCIDSibling(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.getAttribute(PHX_SKIP) !== null;\n  }\n\n  targetCIDContainer(html) {\n    if (!this.isCIDPatch()) {\n      return;\n    }\n\n    let [first, ...rest] = dom_default.findComponentNodeList(this.container, this.targetCID);\n\n    if (rest.length === 0 && dom_default.childNodeLength(html) === 1) {\n      return first;\n    } else {\n      return first && first.parentNode;\n    }\n  }\n\n  buildDiffHTML(container, html, phxUpdate, targetContainer) {\n    let isCIDPatch = this.isCIDPatch();\n    let isCIDWithSingleRoot = isCIDPatch && targetContainer.getAttribute(PHX_COMPONENT) === this.targetCID.toString();\n\n    if (!isCIDPatch || isCIDWithSingleRoot) {\n      return html;\n    } else {\n      let diffContainer = null;\n      let template = document.createElement(\"template\");\n      diffContainer = dom_default.cloneNode(targetContainer);\n      let [firstComponent, ...rest] = dom_default.findComponentNodeList(diffContainer, this.targetCID);\n      template.innerHTML = html;\n      rest.forEach(el => el.remove());\n      Array.from(diffContainer.childNodes).forEach(child => {\n        if (child.id && child.nodeType === Node.ELEMENT_NODE && child.getAttribute(PHX_COMPONENT) !== this.targetCID.toString()) {\n          child.setAttribute(PHX_SKIP, \"\");\n          child.innerHTML = \"\";\n        }\n      });\n      Array.from(template.content.childNodes).forEach(el => diffContainer.insertBefore(el, firstComponent));\n      firstComponent.remove();\n      return diffContainer.outerHTML;\n    }\n  }\n\n}; // js/phoenix_live_view/rendered.js\n\nvar Rendered = class {\n  static extract(diff) {\n    let {\n      [REPLY]: reply,\n      [EVENTS]: events,\n      [TITLE]: title\n    } = diff;\n    delete diff[REPLY];\n    delete diff[EVENTS];\n    delete diff[TITLE];\n    return {\n      diff,\n      title,\n      reply: reply || null,\n      events: events || []\n    };\n  }\n\n  constructor(viewId, rendered) {\n    this.viewId = viewId;\n    this.rendered = {};\n    this.mergeDiff(rendered);\n  }\n\n  parentViewId() {\n    return this.viewId;\n  }\n\n  toString(onlyCids) {\n    return this.recursiveToString(this.rendered, this.rendered[COMPONENTS], onlyCids);\n  }\n\n  recursiveToString(rendered, components = rendered[COMPONENTS], onlyCids) {\n    onlyCids = onlyCids ? new Set(onlyCids) : null;\n    let output = {\n      buffer: \"\",\n      components,\n      onlyCids\n    };\n    this.toOutputBuffer(rendered, output);\n    return output.buffer;\n  }\n\n  componentCIDs(diff) {\n    return Object.keys(diff[COMPONENTS] || {}).map(i => parseInt(i));\n  }\n\n  isComponentOnlyDiff(diff) {\n    if (!diff[COMPONENTS]) {\n      return false;\n    }\n\n    return Object.keys(diff).length === 1;\n  }\n\n  getComponent(diff, cid) {\n    return diff[COMPONENTS][cid];\n  }\n\n  mergeDiff(diff) {\n    let newc = diff[COMPONENTS];\n    let cache = {};\n    delete diff[COMPONENTS];\n    this.rendered = this.mutableMerge(this.rendered, diff);\n    this.rendered[COMPONENTS] = this.rendered[COMPONENTS] || {};\n\n    if (newc) {\n      let oldc = this.rendered[COMPONENTS];\n\n      for (let cid in newc) {\n        newc[cid] = this.cachedFindComponent(cid, newc[cid], oldc, newc, cache);\n      }\n\n      for (var key in newc) {\n        oldc[key] = newc[key];\n      }\n\n      diff[COMPONENTS] = newc;\n    }\n  }\n\n  cachedFindComponent(cid, cdiff, oldc, newc, cache) {\n    if (cache[cid]) {\n      return cache[cid];\n    } else {\n      let ndiff,\n          stat,\n          scid = cdiff[STATIC];\n\n      if (isCid(scid)) {\n        let tdiff;\n\n        if (scid > 0) {\n          tdiff = this.cachedFindComponent(scid, newc[scid], oldc, newc, cache);\n        } else {\n          tdiff = oldc[-scid];\n        }\n\n        stat = tdiff[STATIC];\n        ndiff = this.cloneMerge(tdiff, cdiff);\n        ndiff[STATIC] = stat;\n      } else {\n        ndiff = cdiff[STATIC] !== void 0 ? cdiff : this.cloneMerge(oldc[cid] || {}, cdiff);\n      }\n\n      cache[cid] = ndiff;\n      return ndiff;\n    }\n  }\n\n  mutableMerge(target, source) {\n    if (source[STATIC] !== void 0) {\n      return source;\n    } else {\n      this.doMutableMerge(target, source);\n      return target;\n    }\n  }\n\n  doMutableMerge(target, source) {\n    for (let key in source) {\n      let val = source[key];\n      let targetVal = target[key];\n\n      if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {\n        this.doMutableMerge(targetVal, val);\n      } else {\n        target[key] = val;\n      }\n    }\n  }\n\n  cloneMerge(target, source) {\n    let merged = { ...target,\n      ...source\n    };\n\n    for (let key in merged) {\n      let val = source[key];\n      let targetVal = target[key];\n\n      if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {\n        merged[key] = this.cloneMerge(targetVal, val);\n      }\n    }\n\n    return merged;\n  }\n\n  componentToString(cid) {\n    return this.recursiveCIDToString(this.rendered[COMPONENTS], cid);\n  }\n\n  pruneCIDs(cids) {\n    cids.forEach(cid => delete this.rendered[COMPONENTS][cid]);\n  }\n\n  get() {\n    return this.rendered;\n  }\n\n  isNewFingerprint(diff = {}) {\n    return !!diff[STATIC];\n  }\n\n  toOutputBuffer(rendered, output) {\n    if (rendered[DYNAMICS]) {\n      return this.comprehensionToBuffer(rendered, output);\n    }\n\n    let {\n      [STATIC]: statics\n    } = rendered;\n    output.buffer += statics[0];\n\n    for (let i = 1; i < statics.length; i++) {\n      this.dynamicToBuffer(rendered[i - 1], output);\n      output.buffer += statics[i];\n    }\n  }\n\n  comprehensionToBuffer(rendered, output) {\n    let {\n      [DYNAMICS]: dynamics,\n      [STATIC]: statics\n    } = rendered;\n\n    for (let d = 0; d < dynamics.length; d++) {\n      let dynamic = dynamics[d];\n      output.buffer += statics[0];\n\n      for (let i = 1; i < statics.length; i++) {\n        this.dynamicToBuffer(dynamic[i - 1], output);\n        output.buffer += statics[i];\n      }\n    }\n  }\n\n  dynamicToBuffer(rendered, output) {\n    if (typeof rendered === \"number\") {\n      output.buffer += this.recursiveCIDToString(output.components, rendered, output.onlyCids);\n    } else if (isObject(rendered)) {\n      this.toOutputBuffer(rendered, output);\n    } else {\n      output.buffer += rendered;\n    }\n  }\n\n  recursiveCIDToString(components, cid, onlyCids) {\n    let component = components[cid] || logError(`no component for CID ${cid}`, components);\n    let template = document.createElement(\"template\");\n    template.innerHTML = this.recursiveToString(component, components, onlyCids);\n    let container = template.content;\n    let skip = onlyCids && !onlyCids.has(cid);\n    let [hasChildNodes, hasChildComponents] = Array.from(container.childNodes).reduce(([hasNodes, hasComponents], child, i) => {\n      if (child.nodeType === Node.ELEMENT_NODE) {\n        if (child.getAttribute(PHX_COMPONENT)) {\n          return [hasNodes, true];\n        }\n\n        child.setAttribute(PHX_COMPONENT, cid);\n\n        if (!child.id) {\n          child.id = `${this.parentViewId()}-${cid}-${i}`;\n        }\n\n        if (skip) {\n          child.setAttribute(PHX_SKIP, \"\");\n          child.innerHTML = \"\";\n        }\n\n        return [true, hasComponents];\n      } else {\n        if (child.nodeValue.trim() !== \"\") {\n          logError(`only HTML element tags are allowed at the root of components.\n\ngot: \"${child.nodeValue.trim()}\"\n\nwithin:\n`, template.innerHTML.trim());\n          child.replaceWith(this.createSpan(child.nodeValue, cid));\n          return [true, hasComponents];\n        } else {\n          child.remove();\n          return [hasNodes, hasComponents];\n        }\n      }\n    }, [false, false]);\n\n    if (!hasChildNodes && !hasChildComponents) {\n      logError(\"expected at least one HTML element tag inside a component, but the component is empty:\\n\", template.innerHTML.trim());\n      return this.createSpan(\"\", cid).outerHTML;\n    } else if (!hasChildNodes && hasChildComponents) {\n      logError(\"expected at least one HTML element tag directly inside a component, but only subcomponents were found. A component must render at least one HTML tag directly inside itself.\", template.innerHTML.trim());\n      return template.innerHTML;\n    } else {\n      return template.innerHTML;\n    }\n  }\n\n  createSpan(text, cid) {\n    let span = document.createElement(\"span\");\n    span.innerText = text;\n    span.setAttribute(PHX_COMPONENT, cid);\n    return span;\n  }\n\n}; // js/phoenix_live_view/view_hook.js\n\nvar viewHookID = 1;\nvar ViewHook = class {\n  static makeID() {\n    return viewHookID++;\n  }\n\n  static elementID(el) {\n    return el.phxHookId;\n  }\n\n  constructor(view, el, callbacks) {\n    this.__view = view;\n    this.__liveSocket = view.liveSocket;\n    this.__callbacks = callbacks;\n    this.__listeners = new Set();\n    this.__isDisconnected = false;\n    this.el = el;\n    this.el.phxHookId = this.constructor.makeID();\n\n    for (let key in this.__callbacks) {\n      this[key] = this.__callbacks[key];\n    }\n  }\n\n  __mounted() {\n    this.mounted && this.mounted();\n  }\n\n  __updated() {\n    this.updated && this.updated();\n  }\n\n  __beforeUpdate() {\n    this.beforeUpdate && this.beforeUpdate();\n  }\n\n  __destroyed() {\n    this.destroyed && this.destroyed();\n  }\n\n  __reconnected() {\n    if (this.__isDisconnected) {\n      this.__isDisconnected = false;\n      this.reconnected && this.reconnected();\n    }\n  }\n\n  __disconnected() {\n    this.__isDisconnected = true;\n    this.disconnected && this.disconnected();\n  }\n\n  pushEvent(event, payload = {}, onReply = function () {}) {\n    return this.__view.pushHookEvent(null, event, payload, onReply);\n  }\n\n  pushEventTo(phxTarget, event, payload = {}, onReply = function () {}) {\n    return this.__view.withinTargets(phxTarget, (view, targetCtx) => {\n      return view.pushHookEvent(targetCtx, event, payload, onReply);\n    });\n  }\n\n  handleEvent(event, callback) {\n    let callbackRef = (customEvent, bypass) => bypass ? event : callback(customEvent.detail);\n\n    window.addEventListener(`phx:hook:${event}`, callbackRef);\n\n    this.__listeners.add(callbackRef);\n\n    return callbackRef;\n  }\n\n  removeHandleEvent(callbackRef) {\n    let event = callbackRef(null, true);\n    window.removeEventListener(`phx:hook:${event}`, callbackRef);\n\n    this.__listeners.delete(callbackRef);\n  }\n\n  upload(name, files) {\n    return this.__view.dispatchUploads(name, files);\n  }\n\n  uploadTo(phxTarget, name, files) {\n    return this.__view.withinTargets(phxTarget, view => view.dispatchUploads(name, files));\n  }\n\n  __cleanup__() {\n    this.__listeners.forEach(callbackRef => this.removeHandleEvent(callbackRef));\n  }\n\n}; // js/phoenix_live_view/view.js\n\nvar serializeForm = (form, meta = {}) => {\n  let formData = new FormData(form);\n  let toRemove = [];\n  formData.forEach((val, key, _index) => {\n    if (val instanceof File) {\n      toRemove.push(key);\n    }\n  });\n  toRemove.forEach(key => formData.delete(key));\n  let params = new URLSearchParams();\n\n  for (let [key, val] of formData.entries()) {\n    params.append(key, val);\n  }\n\n  for (let metaKey in meta) {\n    params.append(metaKey, meta[metaKey]);\n  }\n\n  return params.toString();\n};\n\nvar View = class {\n  constructor(el, liveSocket, parentView, flash) {\n    this.liveSocket = liveSocket;\n    this.flash = flash;\n    this.parent = parentView;\n    this.root = parentView ? parentView.root : this;\n    this.el = el;\n    this.id = this.el.id;\n    this.ref = 0;\n    this.childJoins = 0;\n    this.loaderTimer = null;\n    this.pendingDiffs = [];\n    this.pruningCIDs = [];\n    this.redirect = false;\n    this.href = null;\n    this.joinCount = this.parent ? this.parent.joinCount - 1 : 0;\n    this.joinPending = true;\n    this.destroyed = false;\n\n    this.joinCallback = function () {};\n\n    this.stopCallback = function () {};\n\n    this.pendingJoinOps = this.parent ? null : [];\n    this.viewHooks = {};\n    this.uploaders = {};\n    this.formSubmits = [];\n    this.children = this.parent ? null : {};\n    this.root.children[this.id] = {};\n    this.channel = this.liveSocket.channel(`lv:${this.id}`, () => {\n      return {\n        redirect: this.redirect ? this.href : void 0,\n        url: this.redirect ? void 0 : this.href || void 0,\n        params: this.connectParams(),\n        session: this.getSession(),\n        static: this.getStatic(),\n        flash: this.flash\n      };\n    });\n    this.showLoader(this.liveSocket.loaderTimeout);\n    this.bindChannel();\n  }\n\n  setHref(href) {\n    this.href = href;\n  }\n\n  setRedirect(href) {\n    this.redirect = true;\n    this.href = href;\n  }\n\n  isMain() {\n    return this.liveSocket.main === this;\n  }\n\n  connectParams() {\n    let params = this.liveSocket.params(this.el);\n    let manifest = dom_default.all(document, `[${this.binding(PHX_TRACK_STATIC)}]`).map(node => node.src || node.href).filter(url => typeof url === \"string\");\n\n    if (manifest.length > 0) {\n      params[\"_track_static\"] = manifest;\n    }\n\n    params[\"_mounts\"] = this.joinCount;\n    return params;\n  }\n\n  isConnected() {\n    return this.channel.canPush();\n  }\n\n  getSession() {\n    return this.el.getAttribute(PHX_SESSION);\n  }\n\n  getStatic() {\n    let val = this.el.getAttribute(PHX_STATIC);\n    return val === \"\" ? null : val;\n  }\n\n  destroy(callback = function () {}) {\n    this.destroyAllChildren();\n    this.destroyed = true;\n    delete this.root.children[this.id];\n\n    if (this.parent) {\n      delete this.root.children[this.parent.id][this.id];\n    }\n\n    clearTimeout(this.loaderTimer);\n\n    let onFinished = () => {\n      callback();\n\n      for (let id in this.viewHooks) {\n        this.destroyHook(this.viewHooks[id]);\n      }\n    };\n\n    dom_default.markPhxChildDestroyed(this.el);\n    this.log(\"destroyed\", () => [\"the child has been removed from the parent\"]);\n    this.channel.leave().receive(\"ok\", onFinished).receive(\"error\", onFinished).receive(\"timeout\", onFinished);\n  }\n\n  setContainerClasses(...classes) {\n    this.el.classList.remove(PHX_CONNECTED_CLASS, PHX_DISCONNECTED_CLASS, PHX_ERROR_CLASS);\n    this.el.classList.add(...classes);\n  }\n\n  isLoading() {\n    return this.el.classList.contains(PHX_DISCONNECTED_CLASS);\n  }\n\n  showLoader(timeout) {\n    clearTimeout(this.loaderTimer);\n\n    if (timeout) {\n      this.loaderTimer = setTimeout(() => this.showLoader(), timeout);\n    } else {\n      for (let id in this.viewHooks) {\n        this.viewHooks[id].__disconnected();\n      }\n\n      this.setContainerClasses(PHX_DISCONNECTED_CLASS);\n    }\n  }\n\n  hideLoader() {\n    clearTimeout(this.loaderTimer);\n    this.setContainerClasses(PHX_CONNECTED_CLASS);\n  }\n\n  triggerReconnected() {\n    for (let id in this.viewHooks) {\n      this.viewHooks[id].__reconnected();\n    }\n  }\n\n  log(kind, msgCallback) {\n    this.liveSocket.log(this, kind, msgCallback);\n  }\n\n  withinTargets(phxTarget, callback) {\n    if (phxTarget instanceof HTMLElement) {\n      return this.liveSocket.owner(phxTarget, view => callback(view, phxTarget));\n    }\n\n    if (/^(0|[1-9]\\d*)$/.test(phxTarget)) {\n      let targets = dom_default.findComponentNodeList(this.el, phxTarget);\n\n      if (targets.length === 0) {\n        logError(`no component found matching phx-target of ${phxTarget}`);\n      } else {\n        callback(this, targets[0]);\n      }\n    } else {\n      let targets = Array.from(document.querySelectorAll(phxTarget));\n\n      if (targets.length === 0) {\n        logError(`nothing found matching the phx-target selector \"${phxTarget}\"`);\n      }\n\n      targets.forEach(target => this.liveSocket.owner(target, view => callback(view, target)));\n    }\n  }\n\n  applyDiff(type, rawDiff, callback) {\n    this.log(type, () => [\"\", clone(rawDiff)]);\n    let {\n      diff,\n      reply,\n      events,\n      title\n    } = Rendered.extract(rawDiff);\n\n    if (title) {\n      dom_default.putTitle(title);\n    }\n\n    callback({\n      diff,\n      reply,\n      events\n    });\n    return reply;\n  }\n\n  onJoin(resp) {\n    let {\n      rendered,\n      container\n    } = resp;\n\n    if (container) {\n      let [tag, attrs] = container;\n      this.el = dom_default.replaceRootContainer(this.el, tag, attrs);\n    }\n\n    this.childJoins = 0;\n    this.joinPending = true;\n    this.flash = null;\n    browser_default.dropLocal(this.liveSocket.localStorage, window.location.pathname, CONSECUTIVE_RELOADS);\n    this.applyDiff(\"mount\", rendered, ({\n      diff,\n      events\n    }) => {\n      this.rendered = new Rendered(this.id, diff);\n      let html = this.renderContainer(null, \"join\");\n      this.dropPendingRefs();\n      let forms = this.formsForRecovery(html);\n      this.joinCount++;\n\n      if (forms.length > 0) {\n        forms.forEach(([form, newForm, newCid], i) => {\n          this.pushFormRecovery(form, newCid, resp2 => {\n            if (i === forms.length - 1) {\n              this.onJoinComplete(resp2, html, events);\n            }\n          });\n        });\n      } else {\n        this.onJoinComplete(resp, html, events);\n      }\n    });\n  }\n\n  dropPendingRefs() {\n    dom_default.all(this.el, `[${PHX_REF}]`, el => el.removeAttribute(PHX_REF));\n  }\n\n  onJoinComplete({\n    live_patch\n  }, html, events) {\n    if (this.joinCount > 1 || this.parent && !this.parent.isJoinPending()) {\n      return this.applyJoinPatch(live_patch, html, events);\n    }\n\n    let newChildren = dom_default.findPhxChildrenInFragment(html, this.id).filter(toEl => {\n      let fromEl = toEl.id && this.el.querySelector(`[id=\"${toEl.id}\"]`);\n      let phxStatic = fromEl && fromEl.getAttribute(PHX_STATIC);\n\n      if (phxStatic) {\n        toEl.setAttribute(PHX_STATIC, phxStatic);\n      }\n\n      return this.joinChild(toEl);\n    });\n\n    if (newChildren.length === 0) {\n      if (this.parent) {\n        this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, events)]);\n        this.parent.ackJoin(this);\n      } else {\n        this.onAllChildJoinsComplete();\n        this.applyJoinPatch(live_patch, html, events);\n      }\n    } else {\n      this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, events)]);\n    }\n  }\n\n  attachTrueDocEl() {\n    this.el = dom_default.byId(this.id);\n    this.el.setAttribute(PHX_ROOT_ID, this.root.id);\n  }\n\n  dispatchEvents(events) {\n    events.forEach(([event, payload]) => {\n      window.dispatchEvent(new CustomEvent(`phx:hook:${event}`, {\n        detail: payload\n      }));\n    });\n  }\n\n  applyJoinPatch(live_patch, html, events) {\n    this.attachTrueDocEl();\n    let patch = new DOMPatch(this, this.el, this.id, html, null);\n    patch.markPrunableContentForRemoval();\n    this.performPatch(patch, false);\n    this.joinNewChildren();\n    dom_default.all(this.el, `[${this.binding(PHX_HOOK)}], [data-phx-${PHX_HOOK}]`, hookEl => {\n      let hook = this.addHook(hookEl);\n\n      if (hook) {\n        hook.__mounted();\n      }\n    });\n    this.joinPending = false;\n    this.dispatchEvents(events);\n    this.applyPendingUpdates();\n\n    if (live_patch) {\n      let {\n        kind,\n        to\n      } = live_patch;\n      this.liveSocket.historyPatch(to, kind);\n    }\n\n    this.hideLoader();\n\n    if (this.joinCount > 1) {\n      this.triggerReconnected();\n    }\n\n    this.stopCallback();\n  }\n\n  triggerBeforeUpdateHook(fromEl, toEl) {\n    this.liveSocket.triggerDOM(\"onBeforeElUpdated\", [fromEl, toEl]);\n    let hook = this.getHook(fromEl);\n    let isIgnored = hook && dom_default.isIgnored(fromEl, this.binding(PHX_UPDATE));\n\n    if (hook && !fromEl.isEqualNode(toEl) && !(isIgnored && isEqualObj(fromEl.dataset, toEl.dataset))) {\n      hook.__beforeUpdate();\n\n      return hook;\n    }\n  }\n\n  performPatch(patch, pruneCids) {\n    let destroyedCIDs = [];\n    let phxChildrenAdded = false;\n    let updatedHookIds = new Set();\n    patch.after(\"added\", el => {\n      this.liveSocket.triggerDOM(\"onNodeAdded\", [el]);\n      let newHook = this.addHook(el);\n\n      if (newHook) {\n        newHook.__mounted();\n      }\n    });\n    patch.after(\"phxChildAdded\", _el => phxChildrenAdded = true);\n    patch.before(\"updated\", (fromEl, toEl) => {\n      let hook = this.triggerBeforeUpdateHook(fromEl, toEl);\n\n      if (hook) {\n        updatedHookIds.add(fromEl.id);\n      }\n    });\n    patch.after(\"updated\", el => {\n      if (updatedHookIds.has(el.id)) {\n        this.getHook(el).__updated();\n      }\n    });\n    patch.after(\"discarded\", el => {\n      let cid = this.componentID(el);\n\n      if (isCid(cid) && destroyedCIDs.indexOf(cid) === -1) {\n        destroyedCIDs.push(cid);\n      }\n\n      let hook = this.getHook(el);\n      hook && this.destroyHook(hook);\n    });\n    patch.perform();\n\n    if (pruneCids) {\n      this.maybePushComponentsDestroyed(destroyedCIDs);\n    }\n\n    return phxChildrenAdded;\n  }\n\n  joinNewChildren() {\n    dom_default.findPhxChildren(this.el, this.id).forEach(el => this.joinChild(el));\n  }\n\n  getChildById(id) {\n    return this.root.children[this.id][id];\n  }\n\n  getDescendentByEl(el) {\n    if (el.id === this.id) {\n      return this;\n    } else {\n      return this.children[el.getAttribute(PHX_PARENT_ID)][el.id];\n    }\n  }\n\n  destroyDescendent(id) {\n    for (let parentId in this.root.children) {\n      for (let childId in this.root.children[parentId]) {\n        if (childId === id) {\n          return this.root.children[parentId][childId].destroy();\n        }\n      }\n    }\n  }\n\n  joinChild(el) {\n    let child = this.getChildById(el.id);\n\n    if (!child) {\n      let view = new View(el, this.liveSocket, this);\n      this.root.children[this.id][view.id] = view;\n      view.join();\n      this.childJoins++;\n      return true;\n    }\n  }\n\n  isJoinPending() {\n    return this.joinPending;\n  }\n\n  ackJoin(_child) {\n    this.childJoins--;\n\n    if (this.childJoins === 0) {\n      if (this.parent) {\n        this.parent.ackJoin(this);\n      } else {\n        this.onAllChildJoinsComplete();\n      }\n    }\n  }\n\n  onAllChildJoinsComplete() {\n    this.joinCallback();\n    this.pendingJoinOps.forEach(([view, op]) => {\n      if (!view.isDestroyed()) {\n        op();\n      }\n    });\n    this.pendingJoinOps = [];\n  }\n\n  update(diff, events) {\n    if (this.isJoinPending() || this.liveSocket.hasPendingLink()) {\n      return this.pendingDiffs.push({\n        diff,\n        events\n      });\n    }\n\n    this.rendered.mergeDiff(diff);\n    let phxChildrenAdded = false;\n\n    if (this.rendered.isComponentOnlyDiff(diff)) {\n      this.liveSocket.time(\"component patch complete\", () => {\n        let parentCids = dom_default.findParentCIDs(this.el, this.rendered.componentCIDs(diff));\n        parentCids.forEach(parentCID => {\n          if (this.componentPatch(this.rendered.getComponent(diff, parentCID), parentCID)) {\n            phxChildrenAdded = true;\n          }\n        });\n      });\n    } else if (!isEmpty(diff)) {\n      this.liveSocket.time(\"full patch complete\", () => {\n        let html = this.renderContainer(diff, \"update\");\n        let patch = new DOMPatch(this, this.el, this.id, html, null);\n        phxChildrenAdded = this.performPatch(patch, true);\n      });\n    }\n\n    this.dispatchEvents(events);\n\n    if (phxChildrenAdded) {\n      this.joinNewChildren();\n    }\n  }\n\n  renderContainer(diff, kind) {\n    return this.liveSocket.time(`toString diff (${kind})`, () => {\n      let tag = this.el.tagName;\n      let cids = diff ? this.rendered.componentCIDs(diff).concat(this.pruningCIDs) : null;\n      let html = this.rendered.toString(cids);\n      return `<${tag}>${html}</${tag}>`;\n    });\n  }\n\n  componentPatch(diff, cid) {\n    if (isEmpty(diff)) return false;\n    let html = this.rendered.componentToString(cid);\n    let patch = new DOMPatch(this, this.el, this.id, html, cid);\n    let childrenAdded = this.performPatch(patch, true);\n    return childrenAdded;\n  }\n\n  getHook(el) {\n    return this.viewHooks[ViewHook.elementID(el)];\n  }\n\n  addHook(el) {\n    if (ViewHook.elementID(el) || !el.getAttribute) {\n      return;\n    }\n\n    let hookName = el.getAttribute(`data-phx-${PHX_HOOK}`) || el.getAttribute(this.binding(PHX_HOOK));\n\n    if (hookName && !this.ownsElement(el)) {\n      return;\n    }\n\n    let callbacks = this.liveSocket.getHookCallbacks(hookName);\n\n    if (callbacks) {\n      if (!el.id) {\n        logError(`no DOM ID for hook \"${hookName}\". Hooks require a unique ID on each element.`, el);\n      }\n\n      let hook = new ViewHook(this, el, callbacks);\n      this.viewHooks[ViewHook.elementID(hook.el)] = hook;\n      return hook;\n    } else if (hookName !== null) {\n      logError(`unknown hook found for \"${hookName}\"`, el);\n    }\n  }\n\n  destroyHook(hook) {\n    hook.__destroyed();\n\n    hook.__cleanup__();\n\n    delete this.viewHooks[ViewHook.elementID(hook.el)];\n  }\n\n  applyPendingUpdates() {\n    this.pendingDiffs.forEach(({\n      diff,\n      events\n    }) => this.update(diff, events));\n    this.pendingDiffs = [];\n  }\n\n  onChannel(event, cb) {\n    this.liveSocket.onChannel(this.channel, event, resp => {\n      if (this.isJoinPending()) {\n        this.root.pendingJoinOps.push([this, () => cb(resp)]);\n      } else {\n        cb(resp);\n      }\n    });\n  }\n\n  bindChannel() {\n    this.liveSocket.onChannel(this.channel, \"diff\", rawDiff => {\n      this.applyDiff(\"update\", rawDiff, ({\n        diff,\n        events\n      }) => this.update(diff, events));\n    });\n    this.onChannel(\"redirect\", ({\n      to,\n      flash\n    }) => this.onRedirect({\n      to,\n      flash\n    }));\n    this.onChannel(\"live_patch\", redir => this.onLivePatch(redir));\n    this.onChannel(\"live_redirect\", redir => this.onLiveRedirect(redir));\n    this.channel.onError(reason => this.onError(reason));\n    this.channel.onClose(reason => this.onClose(reason));\n  }\n\n  destroyAllChildren() {\n    for (let id in this.root.children[this.id]) {\n      this.getChildById(id).destroy();\n    }\n  }\n\n  onLiveRedirect(redir) {\n    let {\n      to,\n      kind,\n      flash\n    } = redir;\n    let url = this.expandURL(to);\n    this.liveSocket.historyRedirect(url, kind, flash);\n  }\n\n  onLivePatch(redir) {\n    let {\n      to,\n      kind\n    } = redir;\n    this.href = this.expandURL(to);\n    this.liveSocket.historyPatch(to, kind);\n  }\n\n  expandURL(to) {\n    return to.startsWith(\"/\") ? `${window.location.protocol}//${window.location.host}${to}` : to;\n  }\n\n  onRedirect({\n    to,\n    flash\n  }) {\n    this.liveSocket.redirect(to, flash);\n  }\n\n  isDestroyed() {\n    return this.destroyed;\n  }\n\n  join(callback) {\n    if (!this.parent) {\n      this.stopCallback = this.liveSocket.withPageLoading({\n        to: this.href,\n        kind: \"initial\"\n      });\n    }\n\n    this.joinCallback = () => callback && callback(this.joinCount);\n\n    this.liveSocket.wrapPush(this, {\n      timeout: false\n    }, () => {\n      return this.channel.join().receive(\"ok\", data => !this.isDestroyed() && this.onJoin(data)).receive(\"error\", resp => !this.isDestroyed() && this.onJoinError(resp)).receive(\"timeout\", () => !this.isDestroyed() && this.onJoinError({\n        reason: \"timeout\"\n      }));\n    });\n  }\n\n  onJoinError(resp) {\n    if (resp.reason === \"unauthorized\" || resp.reason === \"stale\") {\n      this.log(\"error\", () => [\"unauthorized live_redirect. Falling back to page request\", resp]);\n      return this.onRedirect({\n        to: this.href\n      });\n    }\n\n    if (resp.redirect || resp.live_redirect) {\n      this.joinPending = false;\n      this.channel.leave();\n    }\n\n    if (resp.redirect) {\n      return this.onRedirect(resp.redirect);\n    }\n\n    if (resp.live_redirect) {\n      return this.onLiveRedirect(resp.live_redirect);\n    }\n\n    this.log(\"error\", () => [\"unable to join\", resp]);\n    return this.liveSocket.reloadWithJitter(this);\n  }\n\n  onClose(reason) {\n    if (this.isDestroyed()) {\n      return;\n    }\n\n    if (this.isJoinPending() && document.visibilityState !== \"hidden\" || this.liveSocket.hasPendingLink() && reason !== \"leave\") {\n      return this.liveSocket.reloadWithJitter(this);\n    }\n\n    this.destroyAllChildren();\n    this.liveSocket.dropActiveElement(this);\n\n    if (document.activeElement) {\n      document.activeElement.blur();\n    }\n\n    if (this.liveSocket.isUnloaded()) {\n      this.showLoader(BEFORE_UNLOAD_LOADER_TIMEOUT);\n    }\n  }\n\n  onError(reason) {\n    this.onClose(reason);\n    this.log(\"error\", () => [\"view crashed\", reason]);\n\n    if (!this.liveSocket.isUnloaded()) {\n      this.displayError();\n    }\n  }\n\n  displayError() {\n    if (this.isMain()) {\n      dom_default.dispatchEvent(window, \"phx:page-loading-start\", {\n        to: this.href,\n        kind: \"error\"\n      });\n    }\n\n    this.showLoader();\n    this.setContainerClasses(PHX_DISCONNECTED_CLASS, PHX_ERROR_CLASS);\n  }\n\n  pushWithReply(refGenerator, event, payload, onReply = function () {}) {\n    if (!this.isConnected()) {\n      return;\n    }\n\n    let [ref, [el]] = refGenerator ? refGenerator() : [null, []];\n\n    let onLoadingDone = function () {};\n\n    if (el && el.getAttribute(this.binding(PHX_PAGE_LOADING)) !== null) {\n      onLoadingDone = this.liveSocket.withPageLoading({\n        kind: \"element\",\n        target: el\n      });\n    }\n\n    if (typeof payload.cid !== \"number\") {\n      delete payload.cid;\n    }\n\n    return this.liveSocket.wrapPush(this, {\n      timeout: true\n    }, () => {\n      return this.channel.push(event, payload, PUSH_TIMEOUT).receive(\"ok\", resp => {\n        let hookReply = null;\n\n        if (ref !== null) {\n          this.undoRefs(ref);\n        }\n\n        if (resp.diff) {\n          hookReply = this.applyDiff(\"update\", resp.diff, ({\n            diff,\n            events\n          }) => {\n            this.update(diff, events);\n          });\n        }\n\n        if (resp.redirect) {\n          this.onRedirect(resp.redirect);\n        }\n\n        if (resp.live_patch) {\n          this.onLivePatch(resp.live_patch);\n        }\n\n        if (resp.live_redirect) {\n          this.onLiveRedirect(resp.live_redirect);\n        }\n\n        onLoadingDone();\n        onReply(resp, hookReply);\n      });\n    });\n  }\n\n  undoRefs(ref) {\n    dom_default.all(this.el, `[${PHX_REF}=\"${ref}\"]`, el => {\n      let disabledVal = el.getAttribute(PHX_DISABLED);\n      el.removeAttribute(PHX_REF);\n\n      if (el.getAttribute(PHX_READONLY) !== null) {\n        el.readOnly = false;\n        el.removeAttribute(PHX_READONLY);\n      }\n\n      if (disabledVal !== null) {\n        el.disabled = disabledVal === \"true\" ? true : false;\n        el.removeAttribute(PHX_DISABLED);\n      }\n\n      PHX_EVENT_CLASSES.forEach(className => dom_default.removeClass(el, className));\n      let disableRestore = el.getAttribute(PHX_DISABLE_WITH_RESTORE);\n\n      if (disableRestore !== null) {\n        el.innerText = disableRestore;\n        el.removeAttribute(PHX_DISABLE_WITH_RESTORE);\n      }\n\n      let toEl = dom_default.private(el, PHX_REF);\n\n      if (toEl) {\n        let hook = this.triggerBeforeUpdateHook(el, toEl);\n        DOMPatch.patchEl(el, toEl, this.liveSocket.getActiveElement());\n\n        if (hook) {\n          hook.__updated();\n        }\n\n        dom_default.deletePrivate(el, PHX_REF);\n      }\n    });\n  }\n\n  putRef(elements, event) {\n    let newRef = this.ref++;\n    let disableWith = this.binding(PHX_DISABLE_WITH);\n    elements.forEach(el => {\n      el.classList.add(`phx-${event}-loading`);\n      el.setAttribute(PHX_REF, newRef);\n      let disableText = el.getAttribute(disableWith);\n\n      if (disableText !== null) {\n        if (!el.getAttribute(PHX_DISABLE_WITH_RESTORE)) {\n          el.setAttribute(PHX_DISABLE_WITH_RESTORE, el.innerText);\n        }\n\n        el.innerText = disableText;\n      }\n    });\n    return [newRef, elements];\n  }\n\n  componentID(el) {\n    let cid = el.getAttribute && el.getAttribute(PHX_COMPONENT);\n    return cid ? parseInt(cid) : null;\n  }\n\n  targetComponentID(target, targetCtx) {\n    if (target.getAttribute(this.binding(\"target\"))) {\n      return this.closestComponentID(targetCtx);\n    } else {\n      return null;\n    }\n  }\n\n  closestComponentID(targetCtx) {\n    if (targetCtx) {\n      return maybe(targetCtx.closest(`[${PHX_COMPONENT}]`), el => this.ownsElement(el) && this.componentID(el));\n    } else {\n      return null;\n    }\n  }\n\n  pushHookEvent(targetCtx, event, payload, onReply) {\n    if (!this.isConnected()) {\n      this.log(\"hook\", () => [\"unable to push hook event. LiveView not connected\", event, payload]);\n      return false;\n    }\n\n    let [ref, els] = this.putRef([], \"hook\");\n    this.pushWithReply(() => [ref, els], \"event\", {\n      type: \"hook\",\n      event,\n      value: payload,\n      cid: this.closestComponentID(targetCtx)\n    }, (resp, reply) => onReply(reply, ref));\n    return ref;\n  }\n\n  extractMeta(el, meta) {\n    let prefix = this.binding(\"value-\");\n\n    for (let i = 0; i < el.attributes.length; i++) {\n      let name = el.attributes[i].name;\n\n      if (name.startsWith(prefix)) {\n        meta[name.replace(prefix, \"\")] = el.getAttribute(name);\n      }\n    }\n\n    if (el.value !== void 0) {\n      meta.value = el.value;\n\n      if (el.tagName === \"INPUT\" && CHECKABLE_INPUTS.indexOf(el.type) >= 0 && !el.checked) {\n        delete meta.value;\n      }\n    }\n\n    return meta;\n  }\n\n  pushEvent(type, el, targetCtx, phxEvent, meta) {\n    this.pushWithReply(() => this.putRef([el], type), \"event\", {\n      type,\n      event: phxEvent,\n      value: this.extractMeta(el, meta),\n      cid: this.targetComponentID(el, targetCtx)\n    });\n  }\n\n  pushKey(keyElement, targetCtx, kind, phxEvent, meta) {\n    this.pushWithReply(() => this.putRef([keyElement], kind), \"event\", {\n      type: kind,\n      event: phxEvent,\n      value: this.extractMeta(keyElement, meta),\n      cid: this.targetComponentID(keyElement, targetCtx)\n    });\n  }\n\n  pushFileProgress(fileEl, entryRef, progress, onReply = function () {}) {\n    this.liveSocket.withinOwners(fileEl.form, (view, targetCtx) => {\n      view.pushWithReply(null, \"progress\", {\n        event: fileEl.getAttribute(view.binding(PHX_PROGRESS)),\n        ref: fileEl.getAttribute(PHX_UPLOAD_REF),\n        entry_ref: entryRef,\n        progress,\n        cid: view.targetComponentID(fileEl.form, targetCtx)\n      }, onReply);\n    });\n  }\n\n  pushInput(inputEl, targetCtx, forceCid, phxEvent, eventTarget, callback) {\n    let uploads;\n    let cid = isCid(forceCid) ? forceCid : this.targetComponentID(inputEl.form, targetCtx);\n\n    let refGenerator = () => this.putRef([inputEl, inputEl.form], \"change\");\n\n    let formData = serializeForm(inputEl.form, {\n      _target: eventTarget.name\n    });\n\n    if (inputEl.files && inputEl.files.length > 0) {\n      LiveUploader.trackFiles(inputEl, Array.from(inputEl.files));\n    }\n\n    uploads = LiveUploader.serializeUploads(inputEl);\n    let event = {\n      type: \"form\",\n      event: phxEvent,\n      value: formData,\n      uploads,\n      cid\n    };\n    this.pushWithReply(refGenerator, \"event\", event, resp => {\n      dom_default.showError(inputEl, this.liveSocket.binding(PHX_FEEDBACK_FOR));\n\n      if (dom_default.isUploadInput(inputEl) && inputEl.getAttribute(\"data-phx-auto-upload\") !== null) {\n        if (LiveUploader.filesAwaitingPreflight(inputEl).length > 0) {\n          let [ref, _els] = refGenerator();\n          this.uploadFiles(inputEl.form, targetCtx, ref, cid, _uploads => {\n            callback && callback(resp);\n            this.triggerAwaitingSubmit(inputEl.form);\n          });\n        }\n      } else {\n        callback && callback(resp);\n      }\n    });\n  }\n\n  triggerAwaitingSubmit(formEl) {\n    let awaitingSubmit = this.getScheduledSubmit(formEl);\n\n    if (awaitingSubmit) {\n      let [_el, _ref, callback] = awaitingSubmit;\n      this.cancelSubmit(formEl);\n      callback();\n    }\n  }\n\n  getScheduledSubmit(formEl) {\n    return this.formSubmits.find(([el, _callback]) => el.isSameNode(formEl));\n  }\n\n  scheduleSubmit(formEl, ref, callback) {\n    if (this.getScheduledSubmit(formEl)) {\n      return true;\n    }\n\n    this.formSubmits.push([formEl, ref, callback]);\n  }\n\n  cancelSubmit(formEl) {\n    this.formSubmits = this.formSubmits.filter(([el, ref, _callback]) => {\n      if (el.isSameNode(formEl)) {\n        this.undoRefs(ref);\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }\n\n  pushFormSubmit(formEl, targetCtx, phxEvent, onReply) {\n    let filterIgnored = el => {\n      let userIgnored = closestPhxBinding(el, `${this.binding(PHX_UPDATE)}=ignore`, el.form);\n      return !(userIgnored || closestPhxBinding(el, \"data-phx-update=ignore\", el.form));\n    };\n\n    let filterDisables = el => {\n      return el.hasAttribute(this.binding(PHX_DISABLE_WITH));\n    };\n\n    let filterButton = el => el.tagName == \"BUTTON\";\n\n    let filterInput = el => [\"INPUT\", \"TEXTAREA\", \"SELECT\"].includes(el.tagName);\n\n    let refGenerator = () => {\n      let formElements = Array.from(formEl.elements);\n      let disables = formElements.filter(filterDisables);\n      let buttons = formElements.filter(filterButton).filter(filterIgnored);\n      let inputs = formElements.filter(filterInput).filter(filterIgnored);\n      buttons.forEach(button => {\n        button.setAttribute(PHX_DISABLED, button.disabled);\n        button.disabled = true;\n      });\n      inputs.forEach(input => {\n        input.setAttribute(PHX_READONLY, input.readOnly);\n        input.readOnly = true;\n\n        if (input.files) {\n          input.setAttribute(PHX_DISABLED, input.disabled);\n          input.disabled = true;\n        }\n      });\n      formEl.setAttribute(this.binding(PHX_PAGE_LOADING), \"\");\n      return this.putRef([formEl].concat(disables).concat(buttons).concat(inputs), \"submit\");\n    };\n\n    let cid = this.targetComponentID(formEl, targetCtx);\n\n    if (LiveUploader.hasUploadsInProgress(formEl)) {\n      let [ref, _els] = refGenerator();\n      return this.scheduleSubmit(formEl, ref, () => this.pushFormSubmit(formEl, targetCtx, phxEvent, onReply));\n    } else if (LiveUploader.inputsAwaitingPreflight(formEl).length > 0) {\n      let [ref, els] = refGenerator();\n\n      let proxyRefGen = () => [ref, els];\n\n      this.uploadFiles(formEl, targetCtx, ref, cid, _uploads => {\n        let formData = serializeForm(formEl, {});\n        this.pushWithReply(proxyRefGen, \"event\", {\n          type: \"form\",\n          event: phxEvent,\n          value: formData,\n          cid\n        }, onReply);\n      });\n    } else {\n      let formData = serializeForm(formEl);\n      this.pushWithReply(refGenerator, \"event\", {\n        type: \"form\",\n        event: phxEvent,\n        value: formData,\n        cid\n      }, onReply);\n    }\n  }\n\n  uploadFiles(formEl, targetCtx, ref, cid, onComplete) {\n    let joinCountAtUpload = this.joinCount;\n    let inputEls = LiveUploader.activeFileInputs(formEl);\n    let numFileInputsInProgress = inputEls.length;\n    inputEls.forEach(inputEl => {\n      let uploader = new LiveUploader(inputEl, this, () => {\n        numFileInputsInProgress--;\n\n        if (numFileInputsInProgress === 0) {\n          onComplete();\n        }\n      });\n      this.uploaders[inputEl] = uploader;\n      let entries = uploader.entries().map(entry => entry.toPreflightPayload());\n      let payload = {\n        ref: inputEl.getAttribute(PHX_UPLOAD_REF),\n        entries,\n        cid: this.targetComponentID(inputEl.form, targetCtx)\n      };\n      this.log(\"upload\", () => [\"sending preflight request\", payload]);\n      this.pushWithReply(null, \"allow_upload\", payload, resp => {\n        this.log(\"upload\", () => [\"got preflight response\", resp]);\n\n        if (resp.error) {\n          this.undoRefs(ref);\n          let [entry_ref, reason] = resp.error;\n          this.log(\"upload\", () => [`error for entry ${entry_ref}`, reason]);\n        } else {\n          let onError = callback => {\n            this.channel.onError(() => {\n              if (this.joinCount === joinCountAtUpload) {\n                callback();\n              }\n            });\n          };\n\n          uploader.initAdapterUpload(resp, onError, this.liveSocket);\n        }\n      });\n    });\n  }\n\n  dispatchUploads(name, filesOrBlobs) {\n    let inputs = dom_default.findUploadInputs(this.el).filter(el => el.name === name);\n\n    if (inputs.length === 0) {\n      logError(`no live file inputs found matching the name \"${name}\"`);\n    } else if (inputs.length > 1) {\n      logError(`duplicate live file inputs found matching the name \"${name}\"`);\n    } else {\n      dom_default.dispatchEvent(inputs[0], PHX_TRACK_UPLOADS, {\n        files: filesOrBlobs\n      });\n    }\n  }\n\n  pushFormRecovery(form, newCid, callback) {\n    this.liveSocket.withinOwners(form, (view, targetCtx) => {\n      let input = form.elements[0];\n      let phxEvent = form.getAttribute(this.binding(PHX_AUTO_RECOVER)) || form.getAttribute(this.binding(\"change\"));\n      view.pushInput(input, targetCtx, newCid, phxEvent, input, callback);\n    });\n  }\n\n  pushLinkPatch(href, targetEl, callback) {\n    let linkRef = this.liveSocket.setPendingLink(href);\n    let refGen = targetEl ? () => this.putRef([targetEl], \"click\") : null;\n    this.pushWithReply(refGen, \"live_patch\", {\n      url: href\n    }, resp => {\n      if (resp.link_redirect) {\n        this.liveSocket.replaceMain(href, null, callback, linkRef);\n      } else {\n        if (this.liveSocket.commitPendingLink(linkRef)) {\n          this.href = href;\n        }\n\n        this.applyPendingUpdates();\n        callback && callback(linkRef);\n      }\n    }).receive(\"timeout\", () => this.liveSocket.redirect(window.location.href));\n  }\n\n  formsForRecovery(html) {\n    if (this.joinCount === 0) {\n      return [];\n    }\n\n    let phxChange = this.binding(\"change\");\n    let template = document.createElement(\"template\");\n    template.innerHTML = html;\n    return dom_default.all(this.el, `form[${phxChange}]`).filter(form => form.id && this.ownsElement(form)).filter(form => form.elements.length > 0).filter(form => form.getAttribute(this.binding(PHX_AUTO_RECOVER)) !== \"ignore\").map(form => {\n      let newForm = template.content.querySelector(`form[id=\"${form.id}\"][${phxChange}=\"${form.getAttribute(phxChange)}\"]`);\n\n      if (newForm) {\n        return [form, newForm, this.componentID(newForm)];\n      } else {\n        return [form, null, null];\n      }\n    }).filter(([form, newForm, newCid]) => newForm);\n  }\n\n  maybePushComponentsDestroyed(destroyedCIDs) {\n    let willDestroyCIDs = destroyedCIDs.filter(cid => {\n      return dom_default.findComponentNodeList(this.el, cid).length === 0;\n    });\n\n    if (willDestroyCIDs.length > 0) {\n      this.pruningCIDs.push(...willDestroyCIDs);\n      this.pushWithReply(null, \"cids_will_destroy\", {\n        cids: willDestroyCIDs\n      }, () => {\n        this.pruningCIDs = this.pruningCIDs.filter(cid => willDestroyCIDs.indexOf(cid) !== -1);\n        let completelyDestroyCIDs = willDestroyCIDs.filter(cid => {\n          return dom_default.findComponentNodeList(this.el, cid).length === 0;\n        });\n\n        if (completelyDestroyCIDs.length > 0) {\n          this.pushWithReply(null, \"cids_destroyed\", {\n            cids: completelyDestroyCIDs\n          }, resp => {\n            this.rendered.pruneCIDs(resp.cids);\n          });\n        }\n      });\n    }\n  }\n\n  ownsElement(el) {\n    return el.getAttribute(PHX_PARENT_ID) === this.id || maybe(el.closest(PHX_VIEW_SELECTOR), node => node.id) === this.id;\n  }\n\n  submitForm(form, targetCtx, phxEvent) {\n    dom_default.putPrivate(form, PHX_HAS_SUBMITTED, true);\n    this.liveSocket.blurActiveElement(this);\n    this.pushFormSubmit(form, targetCtx, phxEvent, () => {\n      this.liveSocket.restorePreviouslyActiveFocus();\n    });\n  }\n\n  binding(kind) {\n    return this.liveSocket.binding(kind);\n  }\n\n}; // js/phoenix_live_view/live_socket.js\n\nvar LiveSocket = class {\n  constructor(url, phxSocket, opts = {}) {\n    this.unloaded = false;\n\n    if (!phxSocket || phxSocket.constructor.name === \"Object\") {\n      throw new Error(`\n      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:\n\n          import {Socket} from \"phoenix\"\n          import LiveSocket from \"phoenix_live_view\"\n          let liveSocket = new LiveSocket(\"/live\", Socket, {...})\n      `);\n    }\n\n    this.socket = new phxSocket(url, opts);\n    this.bindingPrefix = opts.bindingPrefix || BINDING_PREFIX;\n    this.opts = opts;\n    this.params = closure(opts.params || {});\n    this.viewLogger = opts.viewLogger;\n    this.metadataCallbacks = opts.metadata || {};\n    this.defaults = Object.assign(clone(DEFAULTS), opts.defaults || {});\n    this.activeElement = null;\n    this.prevActive = null;\n    this.silenced = false;\n    this.main = null;\n    this.linkRef = 1;\n    this.roots = {};\n    this.href = window.location.href;\n    this.pendingLink = null;\n    this.currentLocation = clone(window.location);\n    this.hooks = opts.hooks || {};\n    this.uploaders = opts.uploaders || {};\n    this.loaderTimeout = opts.loaderTimeout || LOADER_TIMEOUT;\n    this.localStorage = opts.localStorage || window.localStorage;\n    this.sessionStorage = opts.sessionStorage || window.sessionStorage;\n    this.boundTopLevelEvents = false;\n    this.domCallbacks = Object.assign({\n      onNodeAdded: closure(),\n      onBeforeElUpdated: closure()\n    }, opts.dom || {});\n    window.addEventListener(\"pagehide\", _e => {\n      this.unloaded = true;\n    });\n    this.socket.onOpen(() => {\n      if (this.isUnloaded()) {\n        window.location.reload();\n      }\n    });\n  }\n\n  isProfileEnabled() {\n    return this.sessionStorage.getItem(PHX_LV_PROFILE) === \"true\";\n  }\n\n  isDebugEnabled() {\n    return this.sessionStorage.getItem(PHX_LV_DEBUG) === \"true\";\n  }\n\n  enableDebug() {\n    this.sessionStorage.setItem(PHX_LV_DEBUG, \"true\");\n  }\n\n  enableProfiling() {\n    this.sessionStorage.setItem(PHX_LV_PROFILE, \"true\");\n  }\n\n  disableDebug() {\n    this.sessionStorage.removeItem(PHX_LV_DEBUG);\n  }\n\n  disableProfiling() {\n    this.sessionStorage.removeItem(PHX_LV_PROFILE);\n  }\n\n  enableLatencySim(upperBoundMs) {\n    this.enableDebug();\n    console.log(\"latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable\");\n    this.sessionStorage.setItem(PHX_LV_LATENCY_SIM, upperBoundMs);\n  }\n\n  disableLatencySim() {\n    this.sessionStorage.removeItem(PHX_LV_LATENCY_SIM);\n  }\n\n  getLatencySim() {\n    let str = this.sessionStorage.getItem(PHX_LV_LATENCY_SIM);\n    return str ? parseInt(str) : null;\n  }\n\n  getSocket() {\n    return this.socket;\n  }\n\n  connect() {\n    let doConnect = () => {\n      if (this.joinRootViews()) {\n        this.bindTopLevelEvents();\n        this.socket.connect();\n      }\n    };\n\n    if ([\"complete\", \"loaded\", \"interactive\"].indexOf(document.readyState) >= 0) {\n      doConnect();\n    } else {\n      document.addEventListener(\"DOMContentLoaded\", () => doConnect());\n    }\n  }\n\n  disconnect(callback) {\n    this.socket.disconnect(callback);\n  }\n\n  triggerDOM(kind, args) {\n    this.domCallbacks[kind](...args);\n  }\n\n  time(name, func) {\n    if (!this.isProfileEnabled() || !console.time) {\n      return func();\n    }\n\n    console.time(name);\n    let result = func();\n    console.timeEnd(name);\n    return result;\n  }\n\n  log(view, kind, msgCallback) {\n    if (this.viewLogger) {\n      let [msg, obj] = msgCallback();\n      this.viewLogger(view, kind, msg, obj);\n    } else if (this.isDebugEnabled()) {\n      let [msg, obj] = msgCallback();\n      debug(view, kind, msg, obj);\n    }\n  }\n\n  onChannel(channel, event, cb) {\n    channel.on(event, data => {\n      let latency = this.getLatencySim();\n\n      if (!latency) {\n        cb(data);\n      } else {\n        console.log(`simulating ${latency}ms of latency from server to client`);\n        setTimeout(() => cb(data), latency);\n      }\n    });\n  }\n\n  wrapPush(view, opts, push) {\n    let latency = this.getLatencySim();\n    let oldJoinCount = view.joinCount;\n\n    if (!latency) {\n      if (opts.timeout) {\n        return push().receive(\"timeout\", () => {\n          if (view.joinCount === oldJoinCount && !view.isDestroyed()) {\n            this.reloadWithJitter(view, () => {\n              this.log(view, \"timeout\", () => [\"received timeout while communicating with server. Falling back to hard refresh for recovery\"]);\n            });\n          }\n        });\n      } else {\n        return push();\n      }\n    }\n\n    console.log(`simulating ${latency}ms of latency from client to server`);\n    let fakePush = {\n      receives: [],\n\n      receive(kind, cb) {\n        this.receives.push([kind, cb]);\n      }\n\n    };\n    setTimeout(() => {\n      if (view.isDestroyed()) {\n        return;\n      }\n\n      fakePush.receives.reduce((acc, [kind, cb]) => acc.receive(kind, cb), push());\n    }, latency);\n    return fakePush;\n  }\n\n  reloadWithJitter(view, log) {\n    view.destroy();\n    this.disconnect();\n    let [minMs, maxMs] = RELOAD_JITTER;\n    let afterMs = Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;\n    let tries = browser_default.updateLocal(this.localStorage, window.location.pathname, CONSECUTIVE_RELOADS, 0, count => count + 1);\n    log ? log() : this.log(view, \"join\", () => [`encountered ${tries} consecutive reloads`]);\n\n    if (tries > MAX_RELOADS) {\n      this.log(view, \"join\", () => [`exceeded ${MAX_RELOADS} consecutive reloads. Entering failsafe mode`]);\n      afterMs = FAILSAFE_JITTER;\n    }\n\n    setTimeout(() => {\n      if (this.hasPendingLink()) {\n        window.location = this.pendingLink;\n      } else {\n        window.location.reload();\n      }\n    }, afterMs);\n  }\n\n  getHookCallbacks(name) {\n    return name && name.startsWith(\"Phoenix.\") ? hooks_default[name.split(\".\")[1]] : this.hooks[name];\n  }\n\n  isUnloaded() {\n    return this.unloaded;\n  }\n\n  isConnected() {\n    return this.socket.isConnected();\n  }\n\n  getBindingPrefix() {\n    return this.bindingPrefix;\n  }\n\n  binding(kind) {\n    return `${this.getBindingPrefix()}${kind}`;\n  }\n\n  channel(topic, params) {\n    return this.socket.channel(topic, params);\n  }\n\n  joinRootViews() {\n    let rootsFound = false;\n    dom_default.all(document, `${PHX_VIEW_SELECTOR}:not([${PHX_PARENT_ID}])`, rootEl => {\n      if (!this.getRootById(rootEl.id)) {\n        let view = this.newRootView(rootEl);\n        view.setHref(this.getHref());\n        view.join();\n\n        if (rootEl.getAttribute(PHX_MAIN)) {\n          this.main = view;\n        }\n      }\n\n      rootsFound = true;\n    });\n    return rootsFound;\n  }\n\n  redirect(to, flash) {\n    this.disconnect();\n    browser_default.redirect(to, flash);\n  }\n\n  replaceMain(href, flash, callback = null, linkRef = this.setPendingLink(href)) {\n    let oldMainEl = this.main.el;\n    let newMainEl = dom_default.cloneNode(oldMainEl, \"\");\n    this.main.showLoader(this.loaderTimeout);\n    this.main.destroy();\n    this.main = this.newRootView(newMainEl, flash);\n    this.main.setRedirect(href);\n    this.main.join(joinCount => {\n      if (joinCount === 1 && this.commitPendingLink(linkRef)) {\n        oldMainEl.replaceWith(newMainEl);\n        callback && callback();\n      }\n    });\n  }\n\n  isPhxView(el) {\n    return el.getAttribute && el.getAttribute(PHX_SESSION) !== null;\n  }\n\n  newRootView(el, flash) {\n    let view = new View(el, this, null, flash);\n    this.roots[view.id] = view;\n    return view;\n  }\n\n  owner(childEl, callback) {\n    let view = maybe(childEl.closest(PHX_VIEW_SELECTOR), el => this.getViewByEl(el));\n\n    if (view) {\n      callback(view);\n    }\n  }\n\n  withinOwners(childEl, callback) {\n    this.owner(childEl, view => {\n      let phxTarget = childEl.getAttribute(this.binding(\"target\"));\n\n      if (phxTarget === null) {\n        callback(view, childEl);\n      } else {\n        view.withinTargets(phxTarget, callback);\n      }\n    });\n  }\n\n  getViewByEl(el) {\n    let rootId = el.getAttribute(PHX_ROOT_ID);\n    return maybe(this.getRootById(rootId), root => root.getDescendentByEl(el));\n  }\n\n  getRootById(id) {\n    return this.roots[id];\n  }\n\n  destroyAllViews() {\n    for (let id in this.roots) {\n      this.roots[id].destroy();\n      delete this.roots[id];\n    }\n  }\n\n  destroyViewByEl(el) {\n    let root = this.getRootById(el.getAttribute(PHX_ROOT_ID));\n\n    if (root) {\n      root.destroyDescendent(el.id);\n    }\n  }\n\n  setActiveElement(target) {\n    if (this.activeElement === target) {\n      return;\n    }\n\n    this.activeElement = target;\n\n    let cancel = () => {\n      if (target === this.activeElement) {\n        this.activeElement = null;\n      }\n\n      target.removeEventListener(\"mouseup\", this);\n      target.removeEventListener(\"touchend\", this);\n    };\n\n    target.addEventListener(\"mouseup\", cancel);\n    target.addEventListener(\"touchend\", cancel);\n  }\n\n  getActiveElement() {\n    if (document.activeElement === document.body) {\n      return this.activeElement || document.activeElement;\n    } else {\n      return document.activeElement || document.body;\n    }\n  }\n\n  dropActiveElement(view) {\n    if (this.prevActive && view.ownsElement(this.prevActive)) {\n      this.prevActive = null;\n    }\n  }\n\n  restorePreviouslyActiveFocus() {\n    if (this.prevActive && this.prevActive !== document.body) {\n      this.prevActive.focus();\n    }\n  }\n\n  blurActiveElement() {\n    this.prevActive = this.getActiveElement();\n\n    if (this.prevActive !== document.body) {\n      this.prevActive.blur();\n    }\n  }\n\n  bindTopLevelEvents() {\n    if (this.boundTopLevelEvents) {\n      return;\n    }\n\n    this.boundTopLevelEvents = true;\n    document.body.addEventListener(\"click\", function () {});\n    window.addEventListener(\"pageshow\", e => {\n      if (e.persisted) {\n        this.getSocket().disconnect();\n        this.withPageLoading({\n          to: window.location.href,\n          kind: \"redirect\"\n        });\n        window.location.reload();\n      }\n    }, true);\n    this.bindNav();\n    this.bindClicks();\n    this.bindForms();\n    this.bind({\n      keyup: \"keyup\",\n      keydown: \"keydown\"\n    }, (e, type, view, target, targetCtx, phxEvent, _phxTarget) => {\n      let matchKey = target.getAttribute(this.binding(PHX_KEY));\n      let pressedKey = e.key && e.key.toLowerCase();\n\n      if (matchKey && matchKey.toLowerCase() !== pressedKey) {\n        return;\n      }\n\n      view.pushKey(target, targetCtx, type, phxEvent, {\n        key: e.key,\n        ...this.eventMeta(type, e, target)\n      });\n    });\n    this.bind({\n      blur: \"focusout\",\n      focus: \"focusin\"\n    }, (e, type, view, targetEl, targetCtx, phxEvent, phxTarget) => {\n      if (!phxTarget) {\n        view.pushEvent(type, targetEl, targetCtx, phxEvent, this.eventMeta(type, e, targetEl));\n      }\n    });\n    this.bind({\n      blur: \"blur\",\n      focus: \"focus\"\n    }, (e, type, view, targetEl, targetCtx, phxEvent, phxTarget) => {\n      if (phxTarget && !phxTarget !== \"window\") {\n        view.pushEvent(type, targetEl, targetCtx, phxEvent, this.eventMeta(type, e, targetEl));\n      }\n    });\n    window.addEventListener(\"dragover\", e => e.preventDefault());\n    window.addEventListener(\"drop\", e => {\n      e.preventDefault();\n      let dropTargetId = maybe(closestPhxBinding(e.target, this.binding(PHX_DROP_TARGET)), trueTarget => {\n        return trueTarget.getAttribute(this.binding(PHX_DROP_TARGET));\n      });\n      let dropTarget = dropTargetId && document.getElementById(dropTargetId);\n      let files = Array.from(e.dataTransfer.files || []);\n\n      if (!dropTarget || dropTarget.disabled || files.length === 0 || !(dropTarget.files instanceof FileList)) {\n        return;\n      }\n\n      LiveUploader.trackFiles(dropTarget, files);\n      dropTarget.dispatchEvent(new Event(\"input\", {\n        bubbles: true\n      }));\n    });\n    this.on(PHX_TRACK_UPLOADS, e => {\n      let uploadTarget = e.target;\n\n      if (!dom_default.isUploadInput(uploadTarget)) {\n        return;\n      }\n\n      let files = Array.from(e.detail.files || []).filter(f => f instanceof File || f instanceof Blob);\n      LiveUploader.trackFiles(uploadTarget, files);\n      uploadTarget.dispatchEvent(new Event(\"input\", {\n        bubbles: true\n      }));\n    });\n  }\n\n  eventMeta(eventName, e, targetEl) {\n    let callback = this.metadataCallbacks[eventName];\n    return callback ? callback(e, targetEl) : {};\n  }\n\n  setPendingLink(href) {\n    this.linkRef++;\n    this.pendingLink = href;\n    return this.linkRef;\n  }\n\n  commitPendingLink(linkRef) {\n    if (this.linkRef !== linkRef) {\n      return false;\n    } else {\n      this.href = this.pendingLink;\n      this.pendingLink = null;\n      return true;\n    }\n  }\n\n  getHref() {\n    return this.href;\n  }\n\n  hasPendingLink() {\n    return !!this.pendingLink;\n  }\n\n  bind(events, callback) {\n    for (let event in events) {\n      let browserEventName = events[event];\n      this.on(browserEventName, e => {\n        let binding = this.binding(event);\n        let windowBinding = this.binding(`window-${event}`);\n        let targetPhxEvent = e.target.getAttribute && e.target.getAttribute(binding);\n\n        if (targetPhxEvent) {\n          this.debounce(e.target, e, () => {\n            this.withinOwners(e.target, (view, targetCtx) => {\n              callback(e, event, view, e.target, targetCtx, targetPhxEvent, null);\n            });\n          });\n        } else {\n          dom_default.all(document, `[${windowBinding}]`, el => {\n            let phxEvent = el.getAttribute(windowBinding);\n            this.debounce(el, e, () => {\n              this.withinOwners(el, (view, targetCtx) => {\n                callback(e, event, view, el, targetCtx, phxEvent, \"window\");\n              });\n            });\n          });\n        }\n      });\n    }\n  }\n\n  bindClicks() {\n    this.bindClick(\"click\", \"click\", false);\n    this.bindClick(\"mousedown\", \"capture-click\", true);\n  }\n\n  bindClick(eventName, bindingName, capture) {\n    let click = this.binding(bindingName);\n    window.addEventListener(eventName, e => {\n      if (!this.isConnected()) {\n        return;\n      }\n\n      let target = null;\n\n      if (capture) {\n        target = e.target.matches(`[${click}]`) ? e.target : e.target.querySelector(`[${click}]`);\n      } else {\n        target = closestPhxBinding(e.target, click);\n      }\n\n      let phxEvent = target && target.getAttribute(click);\n\n      if (!phxEvent) {\n        return;\n      }\n\n      if (target.getAttribute(\"href\") === \"#\") {\n        e.preventDefault();\n      }\n\n      this.debounce(target, e, () => {\n        this.withinOwners(target, (view, targetCtx) => {\n          view.pushEvent(\"click\", target, targetCtx, phxEvent, this.eventMeta(\"click\", e, target));\n        });\n      });\n    }, capture);\n  }\n\n  bindNav() {\n    if (!browser_default.canPushState()) {\n      return;\n    }\n\n    if (history.scrollRestoration) {\n      history.scrollRestoration = \"manual\";\n    }\n\n    let scrollTimer = null;\n    window.addEventListener(\"scroll\", _e => {\n      clearTimeout(scrollTimer);\n      scrollTimer = setTimeout(() => {\n        browser_default.updateCurrentState(state => Object.assign(state, {\n          scroll: window.scrollY\n        }));\n      }, 100);\n    });\n    window.addEventListener(\"popstate\", event => {\n      if (!this.registerNewLocation(window.location)) {\n        return;\n      }\n\n      let {\n        type,\n        id,\n        root,\n        scroll\n      } = event.state || {};\n      let href = window.location.href;\n\n      if (this.main.isConnected() && type === \"patch\" && id === this.main.id) {\n        this.main.pushLinkPatch(href, null);\n      } else {\n        this.replaceMain(href, null, () => {\n          if (root) {\n            this.replaceRootHistory();\n          }\n\n          if (typeof scroll === \"number\") {\n            setTimeout(() => {\n              window.scrollTo(0, scroll);\n            }, 0);\n          }\n        });\n      }\n    }, false);\n    window.addEventListener(\"click\", e => {\n      let target = closestPhxBinding(e.target, PHX_LIVE_LINK);\n      let type = target && target.getAttribute(PHX_LIVE_LINK);\n      let wantsNewTab = e.metaKey || e.ctrlKey || e.button === 1;\n\n      if (!type || !this.isConnected() || !this.main || wantsNewTab) {\n        return;\n      }\n\n      let href = target.href;\n      let linkState = target.getAttribute(PHX_LINK_STATE);\n      e.preventDefault();\n\n      if (this.pendingLink === href) {\n        return;\n      }\n\n      if (type === \"patch\") {\n        this.pushHistoryPatch(href, linkState, target);\n      } else if (type === \"redirect\") {\n        this.historyRedirect(href, linkState);\n      } else {\n        throw new Error(`expected ${PHX_LIVE_LINK} to be \"patch\" or \"redirect\", got: ${type}`);\n      }\n    }, false);\n  }\n\n  withPageLoading(info, callback) {\n    dom_default.dispatchEvent(window, \"phx:page-loading-start\", info);\n\n    let done = () => dom_default.dispatchEvent(window, \"phx:page-loading-stop\", info);\n\n    return callback ? callback(done) : done;\n  }\n\n  pushHistoryPatch(href, linkState, targetEl) {\n    this.withPageLoading({\n      to: href,\n      kind: \"patch\"\n    }, done => {\n      this.main.pushLinkPatch(href, targetEl, linkRef => {\n        this.historyPatch(href, linkState, linkRef);\n        done();\n      });\n    });\n  }\n\n  historyPatch(href, linkState, linkRef = this.setPendingLink(href)) {\n    if (!this.commitPendingLink(linkRef)) {\n      return;\n    }\n\n    browser_default.pushState(linkState, {\n      type: \"patch\",\n      id: this.main.id\n    }, href);\n    this.registerNewLocation(window.location);\n  }\n\n  historyRedirect(href, linkState, flash) {\n    let scroll = window.scrollY;\n    this.withPageLoading({\n      to: href,\n      kind: \"redirect\"\n    }, done => {\n      this.replaceMain(href, flash, () => {\n        browser_default.pushState(linkState, {\n          type: \"redirect\",\n          id: this.main.id,\n          scroll\n        }, href);\n        this.registerNewLocation(window.location);\n        done();\n      });\n    });\n  }\n\n  replaceRootHistory() {\n    browser_default.pushState(\"replace\", {\n      root: true,\n      type: \"patch\",\n      id: this.main.id\n    });\n  }\n\n  registerNewLocation(newLocation) {\n    let {\n      pathname,\n      search\n    } = this.currentLocation;\n\n    if (pathname + search === newLocation.pathname + newLocation.search) {\n      return false;\n    } else {\n      this.currentLocation = clone(newLocation);\n      return true;\n    }\n  }\n\n  bindForms() {\n    let iterations = 0;\n    this.on(\"submit\", e => {\n      let phxEvent = e.target.getAttribute(this.binding(\"submit\"));\n\n      if (!phxEvent) {\n        return;\n      }\n\n      e.preventDefault();\n      e.target.disabled = true;\n      this.withinOwners(e.target, (view, targetCtx) => view.submitForm(e.target, targetCtx, phxEvent));\n    }, false);\n\n    for (let type of [\"change\", \"input\"]) {\n      this.on(type, e => {\n        let input = e.target;\n        let phxEvent = input.form && input.form.getAttribute(this.binding(\"change\"));\n\n        if (!phxEvent) {\n          return;\n        }\n\n        if (input.type === \"number\" && input.validity && input.validity.badInput) {\n          return;\n        }\n\n        let currentIterations = iterations;\n        iterations++;\n        let {\n          at,\n          type: lastType\n        } = dom_default.private(input, \"prev-iteration\") || {};\n\n        if (at === currentIterations - 1 && type !== lastType) {\n          return;\n        }\n\n        dom_default.putPrivate(input, \"prev-iteration\", {\n          at: currentIterations,\n          type\n        });\n        this.debounce(input, e, () => {\n          this.withinOwners(input.form, (view, targetCtx) => {\n            dom_default.putPrivate(input, PHX_HAS_FOCUSED, true);\n\n            if (!dom_default.isTextualInput(input)) {\n              this.setActiveElement(input);\n            }\n\n            view.pushInput(input, targetCtx, null, phxEvent, e.target);\n          });\n        });\n      }, false);\n    }\n  }\n\n  debounce(el, event, callback) {\n    let phxDebounce = this.binding(PHX_DEBOUNCE);\n    let phxThrottle = this.binding(PHX_THROTTLE);\n    let defaultDebounce = this.defaults.debounce.toString();\n    let defaultThrottle = this.defaults.throttle.toString();\n    dom_default.debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, callback);\n  }\n\n  silenceEvents(callback) {\n    this.silenced = true;\n    callback();\n    this.silenced = false;\n  }\n\n  on(event, callback) {\n    window.addEventListener(event, e => {\n      if (!this.silenced) {\n        callback(e);\n      }\n    });\n  }\n\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../deps/phoenix_live_view/priv/static/phoenix_live_view.esm.js\n");

/***/ }),

/***/ "./css/app.css":
/*!*********************!*\
  !*** ./css/app.css ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jc3MvYXBwLmNzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2Nzcy9hcHAuY3NzPzViNzYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./css/app.css\n");

/***/ }),

/***/ "./js/app.js":
/*!*******************!*\
  !*** ./js/app.js ***!
  \*******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _css_app_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css/app.css */ \"./css/app.css\");\n/* harmony import */ var _css_app_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_app_css__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var phoenix_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! phoenix_html */ \"../deps/phoenix_html/priv/static/phoenix_html.js\");\n/* harmony import */ var phoenix_html__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(phoenix_html__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var phoenix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! phoenix */ \"../deps/phoenix/priv/static/phoenix.js\");\n/* harmony import */ var phoenix__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(phoenix__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var nprogress__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! nprogress */ \"./node_modules/nprogress/nprogress.js\");\n/* harmony import */ var nprogress__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(nprogress__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var phoenix_live_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! phoenix_live_view */ \"../deps/phoenix_live_view/priv/static/phoenix_live_view.esm.js\");\n// We need to import the CSS so that webpack will load it.\n// The MiniCssExtractPlugin is used to separate it out into\n// its own CSS file.\n // webpack automatically bundles all modules in your\n// entry points. Those entry points can be configured\n// in \"webpack.config.js\".\n//\n// Import deps with the dep name or local files with a relative path, for example:\n//\n//     import {Socket} from \"phoenix\"\n//     import socket from \"./socket\"\n//\n\n\n\n\n\nvar csrfToken = document.querySelector(\"meta[name='csrf-token']\").getAttribute(\"content\");\nvar liveSocket = new phoenix_live_view__WEBPACK_IMPORTED_MODULE_4__[\"LiveSocket\"](\"/live\", phoenix__WEBPACK_IMPORTED_MODULE_2__[\"Socket\"], {\n  params: {\n    _csrf_token: csrfToken\n  }\n}); // Show progress bar on live navigation and form submits\n\nwindow.addEventListener(\"phx:page-loading-start\", function (info) {\n  return nprogress__WEBPACK_IMPORTED_MODULE_3___default.a.start();\n});\nwindow.addEventListener(\"phx:page-loading-stop\", function (info) {\n  return nprogress__WEBPACK_IMPORTED_MODULE_3___default.a.done();\n}); // connect if there are any LiveViews on the page\n\nliveSocket.connect(); // expose liveSocket on window for web console debug logs and latency simulation:\n// >> liveSocket.enableDebug()\n// >> liveSocket.enableLatencySim(1000)\n\nwindow.liveSocket = liveSocket;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9hcHAuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9hcHAuanM/NzQ3MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXZSBuZWVkIHRvIGltcG9ydCB0aGUgQ1NTIHNvIHRoYXQgd2VicGFjayB3aWxsIGxvYWQgaXQuXG4vLyBUaGUgTWluaUNzc0V4dHJhY3RQbHVnaW4gaXMgdXNlZCB0byBzZXBhcmF0ZSBpdCBvdXQgaW50b1xuLy8gaXRzIG93biBDU1MgZmlsZS5cbmltcG9ydCBcIi4uL2Nzcy9hcHAuY3NzXCJcblxuLy8gd2VicGFjayBhdXRvbWF0aWNhbGx5IGJ1bmRsZXMgYWxsIG1vZHVsZXMgaW4geW91clxuLy8gZW50cnkgcG9pbnRzLiBUaG9zZSBlbnRyeSBwb2ludHMgY2FuIGJlIGNvbmZpZ3VyZWRcbi8vIGluIFwid2VicGFjay5jb25maWcuanNcIi5cbi8vXG4vLyBJbXBvcnQgZGVwcyB3aXRoIHRoZSBkZXAgbmFtZSBvciBsb2NhbCBmaWxlcyB3aXRoIGEgcmVsYXRpdmUgcGF0aCwgZm9yIGV4YW1wbGU6XG4vL1xuLy8gICAgIGltcG9ydCB7U29ja2V0fSBmcm9tIFwicGhvZW5peFwiXG4vLyAgICAgaW1wb3J0IHNvY2tldCBmcm9tIFwiLi9zb2NrZXRcIlxuLy9cbmltcG9ydCBcInBob2VuaXhfaHRtbFwiXG5pbXBvcnQge1NvY2tldH0gZnJvbSBcInBob2VuaXhcIlxuaW1wb3J0IE5Qcm9ncmVzcyBmcm9tIFwibnByb2dyZXNzXCJcbmltcG9ydCB7TGl2ZVNvY2tldH0gZnJvbSBcInBob2VuaXhfbGl2ZV92aWV3XCJcblxubGV0IGNzcmZUb2tlbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtZXRhW25hbWU9J2NzcmYtdG9rZW4nXVwiKS5nZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIpXG5sZXQgbGl2ZVNvY2tldCA9IG5ldyBMaXZlU29ja2V0KFwiL2xpdmVcIiwgU29ja2V0LCB7cGFyYW1zOiB7X2NzcmZfdG9rZW46IGNzcmZUb2tlbn19KVxuXG4vLyBTaG93IHByb2dyZXNzIGJhciBvbiBsaXZlIG5hdmlnYXRpb24gYW5kIGZvcm0gc3VibWl0c1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwaHg6cGFnZS1sb2FkaW5nLXN0YXJ0XCIsIGluZm8gPT4gTlByb2dyZXNzLnN0YXJ0KCkpXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBoeDpwYWdlLWxvYWRpbmctc3RvcFwiLCBpbmZvID0+IE5Qcm9ncmVzcy5kb25lKCkpXG5cbi8vIGNvbm5lY3QgaWYgdGhlcmUgYXJlIGFueSBMaXZlVmlld3Mgb24gdGhlIHBhZ2VcbmxpdmVTb2NrZXQuY29ubmVjdCgpXG5cbi8vIGV4cG9zZSBsaXZlU29ja2V0IG9uIHdpbmRvdyBmb3Igd2ViIGNvbnNvbGUgZGVidWcgbG9ncyBhbmQgbGF0ZW5jeSBzaW11bGF0aW9uOlxuLy8gPj4gbGl2ZVNvY2tldC5lbmFibGVEZWJ1ZygpXG4vLyA+PiBsaXZlU29ja2V0LmVuYWJsZUxhdGVuY3lTaW0oMTAwMClcbndpbmRvdy5saXZlU29ja2V0ID0gbGl2ZVNvY2tldFxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./js/app.js\n");

/***/ }),

/***/ "./node_modules/nprogress/nprogress.js":
/*!*********************************************!*\
  !*** ./node_modules/nprogress/nprogress.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress\n * @license MIT */\n\n;(function(root, factory) {\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n\n})(this, function() {\n  var NProgress = {};\n\n  NProgress.version = '0.2.0';\n\n  var Settings = NProgress.settings = {\n    minimum: 0.08,\n    easing: 'ease',\n    positionUsing: '',\n    speed: 200,\n    trickle: true,\n    trickleRate: 0.02,\n    trickleSpeed: 800,\n    showSpinner: true,\n    barSelector: '[role=\"bar\"]',\n    spinnerSelector: '[role=\"spinner\"]',\n    parent: 'body',\n    template: '<div class=\"bar\" role=\"bar\"><div class=\"peg\"></div></div><div class=\"spinner\" role=\"spinner\"><div class=\"spinner-icon\"></div></div>'\n  };\n\n  /**\n   * Updates configuration.\n   *\n   *     NProgress.configure({\n   *       minimum: 0.1\n   *     });\n   */\n  NProgress.configure = function(options) {\n    var key, value;\n    for (key in options) {\n      value = options[key];\n      if (value !== undefined && options.hasOwnProperty(key)) Settings[key] = value;\n    }\n\n    return this;\n  };\n\n  /**\n   * Last number.\n   */\n\n  NProgress.status = null;\n\n  /**\n   * Sets the progress bar status, where `n` is a number from `0.0` to `1.0`.\n   *\n   *     NProgress.set(0.4);\n   *     NProgress.set(1.0);\n   */\n\n  NProgress.set = function(n) {\n    var started = NProgress.isStarted();\n\n    n = clamp(n, Settings.minimum, 1);\n    NProgress.status = (n === 1 ? null : n);\n\n    var progress = NProgress.render(!started),\n        bar      = progress.querySelector(Settings.barSelector),\n        speed    = Settings.speed,\n        ease     = Settings.easing;\n\n    progress.offsetWidth; /* Repaint */\n\n    queue(function(next) {\n      // Set positionUsing if it hasn't already been set\n      if (Settings.positionUsing === '') Settings.positionUsing = NProgress.getPositioningCSS();\n\n      // Add transition\n      css(bar, barPositionCSS(n, speed, ease));\n\n      if (n === 1) {\n        // Fade out\n        css(progress, { \n          transition: 'none', \n          opacity: 1 \n        });\n        progress.offsetWidth; /* Repaint */\n\n        setTimeout(function() {\n          css(progress, { \n            transition: 'all ' + speed + 'ms linear', \n            opacity: 0 \n          });\n          setTimeout(function() {\n            NProgress.remove();\n            next();\n          }, speed);\n        }, speed);\n      } else {\n        setTimeout(next, speed);\n      }\n    });\n\n    return this;\n  };\n\n  NProgress.isStarted = function() {\n    return typeof NProgress.status === 'number';\n  };\n\n  /**\n   * Shows the progress bar.\n   * This is the same as setting the status to 0%, except that it doesn't go backwards.\n   *\n   *     NProgress.start();\n   *\n   */\n  NProgress.start = function() {\n    if (!NProgress.status) NProgress.set(0);\n\n    var work = function() {\n      setTimeout(function() {\n        if (!NProgress.status) return;\n        NProgress.trickle();\n        work();\n      }, Settings.trickleSpeed);\n    };\n\n    if (Settings.trickle) work();\n\n    return this;\n  };\n\n  /**\n   * Hides the progress bar.\n   * This is the *sort of* the same as setting the status to 100%, with the\n   * difference being `done()` makes some placebo effect of some realistic motion.\n   *\n   *     NProgress.done();\n   *\n   * If `true` is passed, it will show the progress bar even if its hidden.\n   *\n   *     NProgress.done(true);\n   */\n\n  NProgress.done = function(force) {\n    if (!force && !NProgress.status) return this;\n\n    return NProgress.inc(0.3 + 0.5 * Math.random()).set(1);\n  };\n\n  /**\n   * Increments by a random amount.\n   */\n\n  NProgress.inc = function(amount) {\n    var n = NProgress.status;\n\n    if (!n) {\n      return NProgress.start();\n    } else {\n      if (typeof amount !== 'number') {\n        amount = (1 - n) * clamp(Math.random() * n, 0.1, 0.95);\n      }\n\n      n = clamp(n + amount, 0, 0.994);\n      return NProgress.set(n);\n    }\n  };\n\n  NProgress.trickle = function() {\n    return NProgress.inc(Math.random() * Settings.trickleRate);\n  };\n\n  /**\n   * Waits for all supplied jQuery promises and\n   * increases the progress as the promises resolve.\n   *\n   * @param $promise jQUery Promise\n   */\n  (function() {\n    var initial = 0, current = 0;\n\n    NProgress.promise = function($promise) {\n      if (!$promise || $promise.state() === \"resolved\") {\n        return this;\n      }\n\n      if (current === 0) {\n        NProgress.start();\n      }\n\n      initial++;\n      current++;\n\n      $promise.always(function() {\n        current--;\n        if (current === 0) {\n            initial = 0;\n            NProgress.done();\n        } else {\n            NProgress.set((initial - current) / initial);\n        }\n      });\n\n      return this;\n    };\n\n  })();\n\n  /**\n   * (Internal) renders the progress bar markup based on the `template`\n   * setting.\n   */\n\n  NProgress.render = function(fromStart) {\n    if (NProgress.isRendered()) return document.getElementById('nprogress');\n\n    addClass(document.documentElement, 'nprogress-busy');\n    \n    var progress = document.createElement('div');\n    progress.id = 'nprogress';\n    progress.innerHTML = Settings.template;\n\n    var bar      = progress.querySelector(Settings.barSelector),\n        perc     = fromStart ? '-100' : toBarPerc(NProgress.status || 0),\n        parent   = document.querySelector(Settings.parent),\n        spinner;\n    \n    css(bar, {\n      transition: 'all 0 linear',\n      transform: 'translate3d(' + perc + '%,0,0)'\n    });\n\n    if (!Settings.showSpinner) {\n      spinner = progress.querySelector(Settings.spinnerSelector);\n      spinner && removeElement(spinner);\n    }\n\n    if (parent != document.body) {\n      addClass(parent, 'nprogress-custom-parent');\n    }\n\n    parent.appendChild(progress);\n    return progress;\n  };\n\n  /**\n   * Removes the element. Opposite of render().\n   */\n\n  NProgress.remove = function() {\n    removeClass(document.documentElement, 'nprogress-busy');\n    removeClass(document.querySelector(Settings.parent), 'nprogress-custom-parent');\n    var progress = document.getElementById('nprogress');\n    progress && removeElement(progress);\n  };\n\n  /**\n   * Checks if the progress bar is rendered.\n   */\n\n  NProgress.isRendered = function() {\n    return !!document.getElementById('nprogress');\n  };\n\n  /**\n   * Determine which positioning CSS rule to use.\n   */\n\n  NProgress.getPositioningCSS = function() {\n    // Sniff on document.body.style\n    var bodyStyle = document.body.style;\n\n    // Sniff prefixes\n    var vendorPrefix = ('WebkitTransform' in bodyStyle) ? 'Webkit' :\n                       ('MozTransform' in bodyStyle) ? 'Moz' :\n                       ('msTransform' in bodyStyle) ? 'ms' :\n                       ('OTransform' in bodyStyle) ? 'O' : '';\n\n    if (vendorPrefix + 'Perspective' in bodyStyle) {\n      // Modern browsers with 3D support, e.g. Webkit, IE10\n      return 'translate3d';\n    } else if (vendorPrefix + 'Transform' in bodyStyle) {\n      // Browsers without 3D support, e.g. IE9\n      return 'translate';\n    } else {\n      // Browsers without translate() support, e.g. IE7-8\n      return 'margin';\n    }\n  };\n\n  /**\n   * Helpers\n   */\n\n  function clamp(n, min, max) {\n    if (n < min) return min;\n    if (n > max) return max;\n    return n;\n  }\n\n  /**\n   * (Internal) converts a percentage (`0..1`) to a bar translateX\n   * percentage (`-100%..0%`).\n   */\n\n  function toBarPerc(n) {\n    return (-1 + n) * 100;\n  }\n\n\n  /**\n   * (Internal) returns the correct CSS for changing the bar's\n   * position given an n percentage, and speed and ease from Settings\n   */\n\n  function barPositionCSS(n, speed, ease) {\n    var barCSS;\n\n    if (Settings.positionUsing === 'translate3d') {\n      barCSS = { transform: 'translate3d('+toBarPerc(n)+'%,0,0)' };\n    } else if (Settings.positionUsing === 'translate') {\n      barCSS = { transform: 'translate('+toBarPerc(n)+'%,0)' };\n    } else {\n      barCSS = { 'margin-left': toBarPerc(n)+'%' };\n    }\n\n    barCSS.transition = 'all '+speed+'ms '+ease;\n\n    return barCSS;\n  }\n\n  /**\n   * (Internal) Queues a function to be executed.\n   */\n\n  var queue = (function() {\n    var pending = [];\n    \n    function next() {\n      var fn = pending.shift();\n      if (fn) {\n        fn(next);\n      }\n    }\n\n    return function(fn) {\n      pending.push(fn);\n      if (pending.length == 1) next();\n    };\n  })();\n\n  /**\n   * (Internal) Applies css properties to an element, similar to the jQuery \n   * css method.\n   *\n   * While this helper does assist with vendor prefixed property names, it \n   * does not perform any manipulation of values prior to setting styles.\n   */\n\n  var css = (function() {\n    var cssPrefixes = [ 'Webkit', 'O', 'Moz', 'ms' ],\n        cssProps    = {};\n\n    function camelCase(string) {\n      return string.replace(/^-ms-/, 'ms-').replace(/-([\\da-z])/gi, function(match, letter) {\n        return letter.toUpperCase();\n      });\n    }\n\n    function getVendorProp(name) {\n      var style = document.body.style;\n      if (name in style) return name;\n\n      var i = cssPrefixes.length,\n          capName = name.charAt(0).toUpperCase() + name.slice(1),\n          vendorName;\n      while (i--) {\n        vendorName = cssPrefixes[i] + capName;\n        if (vendorName in style) return vendorName;\n      }\n\n      return name;\n    }\n\n    function getStyleProp(name) {\n      name = camelCase(name);\n      return cssProps[name] || (cssProps[name] = getVendorProp(name));\n    }\n\n    function applyCss(element, prop, value) {\n      prop = getStyleProp(prop);\n      element.style[prop] = value;\n    }\n\n    return function(element, properties) {\n      var args = arguments,\n          prop, \n          value;\n\n      if (args.length == 2) {\n        for (prop in properties) {\n          value = properties[prop];\n          if (value !== undefined && properties.hasOwnProperty(prop)) applyCss(element, prop, value);\n        }\n      } else {\n        applyCss(element, args[1], args[2]);\n      }\n    }\n  })();\n\n  /**\n   * (Internal) Determines if an element or space separated list of class names contains a class name.\n   */\n\n  function hasClass(element, name) {\n    var list = typeof element == 'string' ? element : classList(element);\n    return list.indexOf(' ' + name + ' ') >= 0;\n  }\n\n  /**\n   * (Internal) Adds a class to an element.\n   */\n\n  function addClass(element, name) {\n    var oldList = classList(element),\n        newList = oldList + name;\n\n    if (hasClass(oldList, name)) return; \n\n    // Trim the opening space.\n    element.className = newList.substring(1);\n  }\n\n  /**\n   * (Internal) Removes a class from an element.\n   */\n\n  function removeClass(element, name) {\n    var oldList = classList(element),\n        newList;\n\n    if (!hasClass(element, name)) return;\n\n    // Replace the class name.\n    newList = oldList.replace(' ' + name + ' ', ' ');\n\n    // Trim the opening and closing spaces.\n    element.className = newList.substring(1, newList.length - 1);\n  }\n\n  /**\n   * (Internal) Gets a space separated list of the class names on the element. \n   * The list is wrapped with a single space on each end to facilitate finding \n   * matches within the list.\n   */\n\n  function classList(element) {\n    return (' ' + (element.className || '') + ' ').replace(/\\s+/gi, ' ');\n  }\n\n  /**\n   * (Internal) Removes an element from the DOM.\n   */\n\n  function removeElement(element) {\n    element && element.parentNode && element.parentNode.removeChild(element);\n  }\n\n  return NProgress;\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/nprogress/nprogress.js\n");

/***/ }),

/***/ 0:
/*!*************************!*\
  !*** multi ./js/app.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./js/app.js */"./js/app.js");


/***/ })

/******/ });